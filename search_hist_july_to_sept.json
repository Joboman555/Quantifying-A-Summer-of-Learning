{
  "event": [
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503420630790662"
          }
        ],
        "query_text": "google no longer lets you download search history"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503420528018039"
          }
        ],
        "query_text": "download google search history"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503420257130454"
          }
        ],
        "query_text": "google get search history -delete"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503420248794592"
          }
        ],
        "query_text": "google get search history"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503420131993161"
          }
        ],
        "query_text": "system time to date 1470585999990531"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503419962102082"
          }
        ],
        "query_text": "google download search history 2017"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503419814731900"
          }
        ],
        "query_text": "google download search history"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503419678167553"
          }
        ],
        "query_text": "analyze google search history"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503419622617202"
          }
        ],
        "query_text": "jupyter notebook change markdown styles"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503419446188914"
          }
        ],
        "query_text": "How to make a pretty jupyter notebook"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503419153210018"
          }
        ],
        "query_text": "install jupyter notebook ubuntu 14.04"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503419030856269"
          }
        ],
        "query_text": "how to run jupyter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503418960845274"
          }
        ],
        "query_text": "jupyter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503416393320200"
          }
        ],
        "query_text": "jest mock a file that uses import export syntax"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503416176007018"
          }
        ],
        "query_text": "jest setmock"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503415865020035"
          }
        ],
        "query_text": "jest specify mock from file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503415802870503"
          }
        ],
        "query_text": "specify default mock to use jest"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503415795901622"
          }
        ],
        "query_text": "specify default mock to use"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503415354543250"
          }
        ],
        "query_text": "jest duplicate manual mock found suppress error"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503413705998458"
          }
        ],
        "query_text": "alex g beach music full album youtube"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503413687917113"
          }
        ],
        "query_text": "alex g beach music full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503413027458582"
          }
        ],
        "query_text": "word cloud"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503413011289630"
          }
        ],
        "query_text": "word map"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503411187898491"
          }
        ],
        "query_text": "burlington ma"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503411175662877"
          }
        ],
        "query_text": "burlington"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503411154111379"
          }
        ],
        "query_text": "Randolph, MA 02368"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503408116742284"
          }
        ],
        "query_text": "go maybe type"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503407912070116"
          }
        ],
        "query_text": "how does webpack watcher work"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503407837087448"
          }
        ],
        "query_text": "watching file change algorithms"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503407313035015"
          }
        ],
        "query_text": "why doesnt go have generics?"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503407091623837"
          }
        ],
        "query_text": "when to use inheritance hacker news"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503406996586870"
          }
        ],
        "query_text": "when to use inheritance"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503406808375926"
          }
        ],
        "query_text": "why is garbage collection slow?"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503406787775977"
          }
        ],
        "query_text": "javascript reduce time spent formatting code"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503385232264592"
          }
        ],
        "query_text": "what is IOPS"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503385069490996"
          }
        ],
        "query_text": "what is network attached storage"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503380008479827"
          }
        ],
        "query_text": "adam savage wikipedia"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503375993238893"
          }
        ],
        "query_text": "(Current Location) -> Salem, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503375992177608"
          }
        ],
        "query_text": "Salem, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503375801500105"
          }
        ],
        "query_text": "seth nobles"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503374776586494"
          }
        ],
        "query_text": "Randolph"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503374763376950"
          }
        ],
        "query_text": "Needham, MA -> Beverly, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503374227623566"
          }
        ],
        "query_text": "craigslist boston musicians"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503373853092586"
          }
        ],
        "query_text": "fractal tree strange loop"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503373001252343"
          }
        ],
        "query_text": "Needham, MA -> Burlington, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503372990367280"
          }
        ],
        "query_text": "(Current Location) -> Burlington, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503372925631147"
          }
        ],
        "query_text": "organicsonicbloom"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503372582624902"
          },
          {
            "timestamp_usec": "1503372585153524"
          }
        ],
        "query_text": "bandmix"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503371513350677"
          }
        ],
        "query_text": "soundcloud jonahspear"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503371502054418"
          }
        ],
        "query_text": "soundcloud jspear"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503371399218972"
          }
        ],
        "query_text": "(Current Location) -> Forge Village, Westford, Mass"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503371388735601"
          }
        ],
        "query_text": "(Current Location) -> Randolph, MA 02368"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503370959541907"
          }
        ],
        "query_text": "kateřina korbašová"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503370874075489"
          }
        ],
        "query_text": "katarinakor"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503370664215922"
          }
        ],
        "query_text": "(Current Location) -> Randolph, MA 02368"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503370661953003"
          }
        ],
        "query_text": "Randolph, MA 02368"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503364110279273"
          }
        ],
        "query_text": "viktor shelf"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503363668494579"
          }
        ],
        "query_text": "diy standing desk converter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503363027848865"
          }
        ],
        "query_text": "elon musk twitter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503362967166850"
          }
        ],
        "query_text": "What is the OECD?"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503362962642841"
          }
        ],
        "query_text": "oecd countries"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503362822308255"
          }
        ],
        "query_text": "nuclear energy power output per dollar"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503362135221054"
          }
        ],
        "query_text": "twitter how to dm somebody"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503361930455962"
          }
        ],
        "query_text": "what is the difference between webassembly and asm.js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503361869465993"
          }
        ],
        "query_text": "upower technologies"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503361857689795"
          }
        ],
        "query_text": "oklo"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503361794632654"
          }
        ],
        "query_text": "jacob dewitte"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503361744743816"
          }
        ],
        "query_text": "upower technologies"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503361633474416"
          }
        ],
        "query_text": "yc nuclear power startup"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503361332847406"
          }
        ],
        "query_text": "synonym for hijinks"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503359690995664"
          }
        ],
        "query_text": "diy standing desk converter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503359500787964"
          }
        ],
        "query_text": "build your own standing desk converter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503355089932830"
          }
        ],
        "query_text": "what is the advantage of interpreter over compiler"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503354975821868"
          }
        ],
        "query_text": "vm context struct"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503354420531614"
          }
        ],
        "query_text": "emscripten install cmake failed"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503354399483655"
          }
        ],
        "query_text": "emscripten cmake failed"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503353823181778"
          }
        ],
        "query_text": "ubuntu where to put applications"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503353568352359"
          }
        ],
        "query_text": "webassembly"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503353355731539"
          }
        ],
        "query_text": "webassembly go"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503352191819329"
          }
        ],
        "query_text": "the module factory of jest.mock is not allowed to reference any out of scope variables"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503350113401935"
          }
        ],
        "query_text": "how long do robin hood verifications"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503350094554733"
          }
        ],
        "query_text": "how long do robin hood applications take"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503349820530374"
          }
        ],
        "query_text": "robinhood api keychain doesnt work"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503349785219698"
          }
        ],
        "query_text": "keychain not suggesting passwords"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503348190609383"
          }
        ],
        "query_text": "jest manual mocks help"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503344374005114"
          }
        ],
        "query_text": "snapshot test unsorted dictionary js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503344366613476"
          }
        ],
        "query_text": "get sorted representation of dictionary js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503344316854167"
          }
        ],
        "query_text": "create sorted array from dictionary js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503344250072403"
          }
        ],
        "query_text": "sort dictionary by key js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503344229648287"
          }
        ],
        "query_text": "lodash order dictionary by keys"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503341074924597"
          }
        ],
        "query_text": "jest mock duplicate manual mock found index.js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503337519898760"
          }
        ],
        "query_text": "mongo insert into db"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503337515494610"
          }
        ],
        "query_text": "insert boolean into mongo"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503336449194239"
          }
        ],
        "query_text": "git see history of a file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503330572891646"
          }
        ],
        "query_text": "whos using webassembly"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503330532451400"
          }
        ],
        "query_text": "entire webapps written in webassembly"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503330447672181"
          }
        ],
        "query_text": "go module system design"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503330076242447"
          }
        ],
        "query_text": "the zen of python examples"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503328744241303"
          }
        ],
        "query_text": "what is the difference between webassembly and asm.js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503328604947309"
          }
        ],
        "query_text": "webassembly"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503294291199438"
          }
        ],
        "query_text": "lean audits"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503278948092519"
          }
        ],
        "query_text": "screen reconnect"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503269944181721"
          }
        ],
        "query_text": "what was the iq of steve jobs"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503268664854388"
          }
        ],
        "query_text": "steve jobs biography pdf"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503268530977942"
          }
        ],
        "query_text": "ibooks display 2 pages"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503268427611819"
          }
        ],
        "query_text": "how to import pdf to ibooks"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503267956493103"
          }
        ],
        "query_text": "steve jobs biography"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503267948104640"
          }
        ],
        "query_text": "steve jobs biography pdf"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503267916565948"
          }
        ],
        "query_text": "iBooks free book"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503267909324499"
          }
        ],
        "query_text": "ipad book apps"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503267891551918"
          },
          {
            "timestamp_usec": "1503267898978062"
          }
        ],
        "query_text": "book stores near me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503266506590169"
          }
        ],
        "query_text": "lodash map properties"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503265794918044"
          }
        ],
        "query_text": "lodash map object"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503262924378305"
          }
        ],
        "query_text": "awesome golang talks"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503262918150347"
          }
        ],
        "query_text": "awesome go talks"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503260257427118"
          }
        ],
        "query_text": "find directory grep"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503260129114443"
          }
        ],
        "query_text": "how to look at webpack bundle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503255861029027"
          }
        ],
        "query_text": "change name of branch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503254509950773"
          }
        ],
        "query_text": "chai expect empty list"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503253006952365"
          }
        ],
        "query_text": "jest mock function without mocking whole module"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503252739569448"
          }
        ],
        "query_text": "mock out only one function in module under test"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503251999938844"
          }
        ],
        "query_text": "how to get jest to use manual mock"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503251858191947"
          }
        ],
        "query_text": "jest manual mocks help"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503251814231022"
          }
        ],
        "query_text": "creating a default mock jest stack overflow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503251521709826"
          }
        ],
        "query_text": "creating a default mock jest"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503251312523951"
          }
        ],
        "query_text": "jest mock class"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503251164484643"
          }
        ],
        "query_text": "es2016 mock out class"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503250645503572"
          }
        ],
        "query_text": "mocking es2016 constructor function"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503250549430446"
          }
        ],
        "query_text": "jest mock class"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503249857587609"
          }
        ],
        "query_text": "jest mock default export"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503245361478221"
          }
        ],
        "query_text": "inheritance in es6"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503244894644908"
          }
        ],
        "query_text": "git see history of a file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503243465560853"
          }
        ],
        "query_text": "phab see history of a file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503242730340698"
          }
        ],
        "query_text": "pop certain file from git stash"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503241874123519"
          }
        ],
        "query_text": "better git merge viewer"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503241379999784"
          }
        ],
        "query_text": "git tricks you didn't know about"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503216963670701"
          }
        ],
        "query_text": "linus torvalds"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503215023999633"
          }
        ],
        "query_text": "andrew linux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503214852007357"
          }
        ],
        "query_text": "linus git google talk"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503214786604945"
          }
        ],
        "query_text": "securit what is network of trust"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503214255734426"
          }
        ],
        "query_text": "does google use git"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503213531160718"
          }
        ],
        "query_text": "linux bitkeeper history"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503213109525570"
          }
        ],
        "query_text": "source control what is CVS"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503211886557976"
          }
        ],
        "query_text": "youtube golang"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503210963694314"
          }
        ],
        "query_text": "bind must be called on a function"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503205806433271"
          }
        ],
        "query_text": "lodash .clone is not a function"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503205637891222"
          }
        ],
        "query_text": "lodash chain values"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503205510238849"
          }
        ],
        "query_text": "lodash isequal ignore property"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503205438740246"
          }
        ],
        "query_text": "lodash isEqual"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503205351520187"
          }
        ],
        "query_text": "ejson"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503204959371149"
          }
        ],
        "query_text": "102 chester st"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503204891221659"
          }
        ],
        "query_text": "amazon pickup location"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503203952367607"
          }
        ],
        "query_text": "what do amazon gift packages look like"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503203940857537"
          },
          {
            "timestamp_usec": "1503203944624584"
          },
          {
            "timestamp_usec": "1503203947096466"
          }
        ],
        "query_text": "what do amazon gift cards look like"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503203734192452"
          }
        ],
        "query_text": "cheap micro quadcopter amazon"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503203722383911"
          }
        ],
        "query_text": "cheap micro quadcopter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503203696916669"
          }
        ],
        "query_text": "revell control xs nano quad micro quadrocopter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503203631790817"
          }
        ],
        "query_text": "mini rc drone"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503203399411795"
          }
        ],
        "query_text": "difference between skeletool cx and sx"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503203277346160"
          }
        ],
        "query_text": "leatherman skeletool"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503203269969771"
          }
        ],
        "query_text": "leatherman wave"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503203235341277"
          }
        ],
        "query_text": "juice xe6"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503203201386183"
          }
        ],
        "query_text": "which leatherman to buy"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503203141858178"
          }
        ],
        "query_text": "dope camping presents"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503202992788604"
          }
        ],
        "query_text": "how many gopros do you own"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503202840368341"
          }
        ],
        "query_text": "102 chester st"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503202400586208"
          },
          {
            "timestamp_usec": "1503202403260874"
          }
        ],
        "query_text": "black diamond spot"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503202298239863"
          }
        ],
        "query_text": "best camping headlamp"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503199271234889"
          }
        ],
        "query_text": "jest how to mock a default export"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503194926614907"
          }
        ],
        "query_text": "es6 check class type"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503190707902453"
          }
        ],
        "query_text": "javascript es6 class read only properties"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503190666145647"
          }
        ],
        "query_text": "javascript es6 class read only field"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503189527490697"
          }
        ],
        "query_text": "js test for object equality"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503189065654760"
          }
        ],
        "query_text": "regex make sure string doesn start with"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503189033846221"
          }
        ],
        "query_text": "regex builder"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503188806645894"
          }
        ],
        "query_text": "chai shallow compare objects"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503185908458189"
          }
        ],
        "query_text": "lodash find"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503184722508745"
          }
        ],
        "query_text": "chai expect test string equality"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503184670963681"
          },
          {
            "timestamp_usec": "1503184700650550"
          }
        ],
        "query_text": "chai expect strings to be equal"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503184226450977"
          }
        ],
        "query_text": "sublime split screen"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503183502210822"
          }
        ],
        "query_text": "javascript export setter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503183246613652"
          }
        ],
        "query_text": "jest expect"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503182266792675"
          }
        ],
        "query_text": "jest mock function"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503181771826026"
          }
        ],
        "query_text": "why is chrome debugger so slow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503179482445934"
          }
        ],
        "query_text": "does squash squash up or down rebase"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503179478416585"
          }
        ],
        "query_text": "does squash squash up or down"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503179199636553"
          }
        ],
        "query_text": "git change order of commits"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503178039653251"
          }
        ],
        "query_text": "the mindblowing GIL"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503177714273767"
          }
        ],
        "query_text": "c vs go speed"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503176822729999"
          }
        ],
        "query_text": "youtube history of golang"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503176815968822"
          }
        ],
        "query_text": "youtube history of go"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503176336385579"
          }
        ],
        "query_text": "sanjoy mahajan"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503175455559266"
          }
        ],
        "query_text": "go for pythonistas"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503173274092941"
          },
          {
            "timestamp_usec": "1503173284224481"
          }
        ],
        "query_text": "youtube golang"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503173261763719"
          }
        ],
        "query_text": "youtube golong"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503173182129680"
          }
        ],
        "query_text": "best go talks"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503172472478176"
          }
        ],
        "query_text": "don't communicate by sharing memory"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503168801547613"
          },
          {
            "timestamp_usec": "1503169877196251"
          }
        ],
        "query_text": "(Current Location) -> 102 Chester St, Allston, MA 02134"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503167223795060"
          }
        ],
        "query_text": "(Current Location) -> Grocery Store"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503167055199051"
          }
        ],
        "query_text": "(Current Location) -> Supermarket near me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503167046746971"
          }
        ],
        "query_text": "(Current Location) -> 102 Chester St, Allston, MA 02134"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503162038890982"
          },
          {
            "timestamp_usec": "1503162060199029"
          }
        ],
        "query_text": "102 Chester St, Allston, MA 02134"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503158050753016"
          }
        ],
        "query_text": "(Current Location) -> CVS, 37 W Main St, Stafford Springs, CT 06076"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503158031184390"
          }
        ],
        "query_text": "pharmacy near me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503158012678700"
          }
        ],
        "query_text": "pharmacy near Union, CT"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503157996761249"
          }
        ],
        "query_text": "cvs"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503157857084508"
          }
        ],
        "query_text": "CVS"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503157242868938"
          }
        ],
        "query_text": "(Current Location) -> Hartford, CT"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503157241830868"
          }
        ],
        "query_text": "Hartford, CT"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503157218764822"
          },
          {
            "timestamp_usec": "1503157220300241"
          }
        ],
        "query_text": "cvs"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503147925213642"
          }
        ],
        "query_text": "(Current Location) -> 420 Main St, Sturbridge, MA 01566"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503144141559742"
          }
        ],
        "query_text": "420 Main St, Sturbridge, MA 01566"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503144137179979"
          }
        ],
        "query_text": "(Current Location) -> 420 Main Street, Sturbridge, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503144136966771"
          }
        ],
        "query_text": "420 Main St, Sturbridge, MA 01566"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503144074171963"
          }
        ],
        "query_text": "102 Chester St, Allston, MA 02134"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503130123551244"
          }
        ],
        "query_text": "(Current Location) -> 420 Main St, Sturbridge, MA 01566"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503124912593544"
          }
        ],
        "query_text": "amazon steve jobs book"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503124566870462"
          }
        ],
        "query_text": "steve jobs audiobook free"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503124528326757"
          }
        ],
        "query_text": "how to get free audiobooks"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503111360896897"
          }
        ],
        "query_text": "prusa i3 kit"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503111315152574"
          },
          {
            "timestamp_usec": "1503111317116622"
          }
        ],
        "query_text": "prusa i3"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503111234404204"
          }
        ],
        "query_text": "chome devtools how to open bundle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503111048079771"
          }
        ],
        "query_text": "(Current Location) -> 420 Main St, Sturbridge, MA 01566"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503109923343744"
          }
        ],
        "query_text": "call new with dynamic object javascript es6"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503109902934471"
          }
        ],
        "query_text": "call new with dynamic object javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503109844228743"
          }
        ],
        "query_text": "how to class es6 class constructor directly"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503108479028195"
          }
        ],
        "query_text": "js difference between self and this"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503108245341043"
          }
        ],
        "query_text": "soft undo st3 keymap"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503108041945585"
          }
        ],
        "query_text": "st3 change emmet key bindings"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503107964898473"
          }
        ],
        "query_text": "st3 ctrl u doesn't soft undo"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503107886012372"
          }
        ],
        "query_text": "sublime ctrl d go back st3"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503107852516784"
          }
        ],
        "query_text": "sublime ctrl d go back"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503107028423460"
          }
        ],
        "query_text": "(Current Location) -> 420 Main St, Sturbridge, MA 01566"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503106016128611"
          }
        ],
        "query_text": "why do i need to bind class methods"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503105304614908"
          }
        ],
        "query_text": "es6 public methods"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503105267633400"
          }
        ],
        "query_text": "javascript public class methods"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503105176830966"
          }
        ],
        "query_text": "es6 class functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503105108638219"
          }
        ],
        "query_text": "es6 class functions not functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503105064363064"
          }
        ],
        "query_text": "javascript class function is not a function"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503104145894354"
          },
          {
            "timestamp_usec": "1503104566662222"
          }
        ],
        "query_text": "es6 class syntax"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503103307975357"
          }
        ],
        "query_text": "iterate through each file in a directory python"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503103303157221"
          }
        ],
        "query_text": "iterate through each file in a directory c#"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503103260620566"
          }
        ],
        "query_text": "(Current Location) -> 420 Main St, Sturbridge, MA 01566"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503103258202379"
          }
        ],
        "query_text": "420 Main St, Sturbridge, MA 01566"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503102733079750"
          }
        ],
        "query_text": "python write file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503102525602852"
          }
        ],
        "query_text": "python invalid group regex"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503102286564975"
          }
        ],
        "query_text": "python replace text in file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503102072923979"
          }
        ],
        "query_text": "how to use re.sub"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503101747480382"
          }
        ],
        "query_text": "using re.sub"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503101592554466"
          }
        ],
        "query_text": "regex return after first match python"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503101530709651"
          }
        ],
        "query_text": "python regex find string with space"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503101169545100"
          }
        ],
        "query_text": "python replace regex"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503101042668087"
          }
        ],
        "query_text": "python 3 join"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503100974901875"
          }
        ],
        "query_text": "list.join"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503100550409316"
          }
        ],
        "query_text": "python map 3"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503100546846309"
          }
        ],
        "query_text": "python map"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503100462980108"
          }
        ],
        "query_text": "python print every item in list"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503100324112905"
          }
        ],
        "query_text": "python iterate through set"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503100287406587"
          }
        ],
        "query_text": "python lambda"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503100199378944"
          }
        ],
        "query_text": "remove start from string python"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503099843342572"
          }
        ],
        "query_text": "sublime text goto end"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503099773246582"
          }
        ],
        "query_text": "python unique"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503099584614496"
          }
        ],
        "query_text": "read all text from file python"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503099409680099"
          }
        ],
        "query_text": "python match string that starts with"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503099393808033"
          }
        ],
        "query_text": "python regex match any number of characters"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503099060401377"
          }
        ],
        "query_text": "python re"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503098790843586"
          }
        ],
        "query_text": "python regex builder"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503098750311616"
          }
        ],
        "query_text": "python regex tester"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503098730477021"
          }
        ],
        "query_text": "python regex syntax"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503098569315856"
          }
        ],
        "query_text": "build a regular expression"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503098457551703"
          }
        ],
        "query_text": "python find all instances of regex example"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503097393678730"
          }
        ],
        "query_text": "can this be binded to a function"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503097339991964"
          }
        ],
        "query_text": "javascript circular function"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503096113099373"
          }
        ],
        "query_text": "flow can't see type annotation nuclide"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503095200763579"
          },
          {
            "timestamp_usec": "1503095200899267"
          }
        ],
        "query_text": "sublime save on replace"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503095196687936"
          }
        ],
        "query_text": "sublime reload on replace"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503095191391868"
          }
        ],
        "query_text": "atom reload on replace"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503094812337660"
          }
        ],
        "query_text": "jest 16 segfault"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503089913405330"
          }
        ],
        "query_text": "postgres ternary logic table"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503089393909366"
          }
        ],
        "query_text": "postgres extract"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503088062499973"
          }
        ],
        "query_text": "postgres ternary logic table"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503088000366724"
          }
        ],
        "query_text": "postgres ternary logic"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503085729754133"
          }
        ],
        "query_text": "postgres date - 1"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503076716836446"
          }
        ],
        "query_text": "eslint-formatter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503076713669013"
          }
        ],
        "query_text": "eslint-formatter-pretty"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503076700342486"
          }
        ],
        "query_text": "eslintAutoFix"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503075726604240"
          }
        ],
        "query_text": "lodash update all in"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503074844161847"
          }
        ],
        "query_text": "lodash extend"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503074826658175"
          }
        ],
        "query_text": "flow can't see type annotation nuclide"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503074822124122"
          }
        ],
        "query_text": "extend dictionary javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503074819555431"
          }
        ],
        "query_text": "jest mock internal state"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503072254453102"
          }
        ],
        "query_text": "jest mock internal state"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503072106746010"
          }
        ],
        "query_text": "what do you name snapshot tests jest?"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503066235848075"
          }
        ],
        "query_text": "megan rain clean your room"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503044238040846"
          }
        ],
        "query_text": "long term effects of amphetamine chronic sleep deprivation"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503043525902696"
          }
        ],
        "query_text": "cx717"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503042826406898"
          }
        ],
        "query_text": "what is histological damage"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503042614103517"
          }
        ],
        "query_text": "brain what is LTP"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503042433266885"
          }
        ],
        "query_text": "cx717 sleep deprivation google scholar"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503042309665614"
          }
        ],
        "query_text": "google scholar how much sleep loss before negative effects"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503042189798120"
          }
        ],
        "query_text": "effects of sleep deprivation hours of sleep google scholar"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503038907578228"
          }
        ],
        "query_text": "(Current Location) -> 102 Chester Street, Allston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503038894454625"
          }
        ],
        "query_text": "(Current Location) -> Avalon Dr, Acton, MA 01720"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503036633222412"
          }
        ],
        "query_text": "(Current Location) -> Avalon Dr, Acton, MA 01720"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503036630896320"
          }
        ],
        "query_text": "4214 Avalon Dr, Acton, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503036148667345"
          }
        ],
        "query_text": "ampakines cx717 google scholar sleep"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503035961640033"
          }
        ],
        "query_text": "ampakines cx717 google scholar"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503035793645825"
          }
        ],
        "query_text": "ampakines cx717"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503035768092779"
          }
        ],
        "query_text": "ampakines reddit"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503024705533771"
          }
        ],
        "query_text": "studies on how much sleep you need military"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503024441996616"
          },
          {
            "timestamp_usec": "1503024535545879"
          }
        ],
        "query_text": "best planet money episodes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503019770254610"
          }
        ],
        "query_text": "(Current Location) -> 37 Oxford Cir, Belmont, MA 02478"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503019768438955"
          }
        ],
        "query_text": "37 Oxford Cir, Belmont, MA 02478"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503019291691252"
          }
        ],
        "query_text": "37 Oxford Circle, Belmont, MA -> Acton, Mass"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503019277543734"
          }
        ],
        "query_text": "(Current Location) -> Acton, Mass"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503019260170296"
          }
        ],
        "query_text": "(Current Location) -> Acton St, Watertown, MA 02472"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503019258328811"
          }
        ],
        "query_text": "Acton Street, Watertown, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503012180621895"
          }
        ],
        "query_text": "(Current Location) -> Ray and Maria Stata Center, Cambridge, MA 02142"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503012179549262"
          }
        ],
        "query_text": "Ray and Maria Stata Center, Cambridge, MA 02142"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503010915691942"
          },
          {
            "timestamp_usec": "1503010918722187"
          }
        ],
        "query_text": "(Current Location) -> 37 Oxford Cir, Belmont, MA 02478"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503010914711757"
          }
        ],
        "query_text": "37 Oxford Cir, Belmont, MA 02478"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503009848659829"
          }
        ],
        "query_text": "flow can't see type annotation nuclide"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503009836404397"
          }
        ],
        "query_text": "nuclide see type annotation on click"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503009667663597"
          }
        ],
        "query_text": "flow refining intersection types"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503009598275723"
          }
        ],
        "query_text": "nuclide see type annotation"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503008425857701"
          },
          {
            "timestamp_usec": "1503008427968535"
          }
        ],
        "query_text": "stata center"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503008419907532"
          }
        ],
        "query_text": "stata center amphitheater"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503008334635131"
          }
        ],
        "query_text": "iphone best time logging app"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503008238593579"
          }
        ],
        "query_text": "slack send delayed message"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1503004044134046"
          }
        ],
        "query_text": "javascript date.format"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502999316549790"
          }
        ],
        "query_text": "june 2013 calendar"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502990653578434"
          }
        ],
        "query_text": "immutable documentation"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502987645446027"
          }
        ],
        "query_text": "array prototype concat"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502985662935803"
          }
        ],
        "query_text": "immutable filter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502984831163842"
          }
        ],
        "query_text": "lodash not null"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502984394284589"
          }
        ],
        "query_text": "white noise"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502984373156457"
          }
        ],
        "query_text": "git change name of commit"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502984168438387"
          }
        ],
        "query_text": "unable to create .git/index.lock"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502984044458562"
          }
        ],
        "query_text": "ctrl c in middle of rebase git process is running"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502966392186578"
          }
        ],
        "query_text": "(Current Location) -> 102 Chester St, Allston, MA 02134"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502966386679513"
          }
        ],
        "query_text": "(Current Location) -> 102 Chester St"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502966386295873"
          }
        ],
        "query_text": "102 Chester St, Allston, MA 02134"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502943685299036"
          }
        ],
        "query_text": "best planet money episodes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502930115248330"
          }
        ],
        "query_text": "madlib shades of blue full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502930101915925"
          }
        ],
        "query_text": "madlib does blue niyr"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502930086963610"
          }
        ],
        "query_text": "madlib music"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502929517209876"
          }
        ],
        "query_text": "dramamine sleep aid dosage"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502919390715643"
          }
        ],
        "query_text": "redbone"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502899113207511"
          }
        ],
        "query_text": "planet money the financial crisis"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502865907803640"
          }
        ],
        "query_text": "turn the freaking frogs gay"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502862811408763"
          }
        ],
        "query_text": "(Current Location) -> Las Vegas, Nevada"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502862807467525"
          }
        ],
        "query_text": "(Current Location) -> las vegas"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502862603915075"
          }
        ],
        "query_text": "connecticut superimposed on bay area"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502862588944977"
          }
        ],
        "query_text": "connecticut superimposer on bay area"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502862547667842"
          }
        ],
        "query_text": "distance between new haven and hartford"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502862525981480"
          }
        ],
        "query_text": "distance between livermore and san francisco"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502856736695918"
          }
        ],
        "query_text": "(Current Location) -> 7000 Coliseum Way, Oakland, CA 94621"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502854344287565"
          }
        ],
        "query_text": "stock options calculator show hn"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502854254520113"
          }
        ],
        "query_text": "stock options calculator"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502851512394020"
          },
          {
            "timestamp_usec": "1502851517396203"
          }
        ],
        "query_text": "(Current Location) -> 7000 Coliseum Way, Oakland, CA 94621"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502851509079289"
          }
        ],
        "query_text": "(Current Location) -> Metreon, 4th Street, San Francisco, CA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502851509076175"
          }
        ],
        "query_text": "(Current Location) -> 7000 Coliseum Way, Oakland, CA 94621"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502851499277492"
          }
        ],
        "query_text": "the oakland coliseum"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502851472677774"
          }
        ],
        "query_text": "the a's stadium"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502846308856017"
          }
        ],
        "query_text": "theatres near here"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502846297317966"
          }
        ],
        "query_text": "(Current Location) -> Metreon, 4th Street, San Francisco, CA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502842339083818"
          }
        ],
        "query_text": "what does testicular cancer feel like"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502841145131265"
          },
          {
            "timestamp_usec": "1502841153619167"
          },
          {
            "timestamp_usec": "1502841168472745"
          },
          {
            "timestamp_usec": "1502841183434662"
          },
          {
            "timestamp_usec": "1502841225792561"
          },
          {
            "timestamp_usec": "1502841245170513"
          },
          {
            "timestamp_usec": "1502841595046722"
          },
          {
            "timestamp_usec": "1502841870065928"
          }
        ],
        "query_text": "(Current Location) -> Metreon, 4th Street, San Francisco, CA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502837296439543"
          },
          {
            "timestamp_usec": "1502837299812493"
          }
        ],
        "query_text": "(Current Location) -> San Francisco, CA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502837288915756"
          }
        ],
        "query_text": "(Current Location) -> Siam Royal Authentic Thai, 338 University Ave, Palo Alto, CA 94301"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502834973011780"
          }
        ],
        "query_text": "(Current Location) -> Siam Royal Authentic Thai, 338 University Ave, Palo Alto, CA 94301"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502831737318186"
          },
          {
            "timestamp_usec": "1502832285135500"
          }
        ],
        "query_text": "(Current Location) -> Siam Royal Authentic Thai, 338 University Ave, Palo Alto, CA 94301"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502831710747810"
          }
        ],
        "query_text": "thai food"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502827597608760"
          }
        ],
        "query_text": "vanessa bayer"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502824487545265"
          }
        ],
        "query_text": "the most expensivest shit"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502822402000972"
          }
        ],
        "query_text": "solar eclipse path"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502822349079511"
          },
          {
            "timestamp_usec": "1502822379143852"
          }
        ],
        "query_text": "solar eclipse picture"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502821939533141"
          }
        ],
        "query_text": "xkcd diet coke and mentos"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502821779993711"
          },
          {
            "timestamp_usec": "1502821791090217"
          }
        ],
        "query_text": "synthetic diamonds ebay"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502821724788330"
          }
        ],
        "query_text": "how much is a lab made diamond"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502821115788253"
          }
        ],
        "query_text": "coso all american cake"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502820785748174"
          }
        ],
        "query_text": "coso all american"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502820217276028"
          }
        ],
        "query_text": "otterbox wikipedia"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502820191945238"
          }
        ],
        "query_text": "otterbox"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502756296371208"
          }
        ],
        "query_text": "psychology don't tell people your goals"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502750999905877"
          }
        ],
        "query_text": "handmaid's tale amazon"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502746393164297"
          }
        ],
        "query_text": "lunch palo alto"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502746367306188"
          },
          {
            "timestamp_usec": "1502746372170677"
          },
          {
            "timestamp_usec": "1502746375043902"
          },
          {
            "timestamp_usec": "1502746378689966"
          }
        ],
        "query_text": "lunch food near ne"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502746359769177"
          },
          {
            "timestamp_usec": "1502746360796468"
          }
        ],
        "query_text": "thai food palo alto"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502746342150547"
          },
          {
            "timestamp_usec": "1502746344588991"
          }
        ],
        "query_text": "Lunch near me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502746315751182"
          }
        ],
        "query_text": "Thaiphoon Restaurant Palo Alto, CA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502746227302554"
          }
        ],
        "query_text": "Asian Box Palo Alto, CA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502746215162841"
          }
        ],
        "query_text": "Lotus Thai Bistro Palo Alto, CA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502746124749356"
          },
          {
            "timestamp_usec": "1502746151865397"
          },
          {
            "timestamp_usec": "1502746184314510"
          }
        ],
        "query_text": "thai food palo alto"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502740819228468"
          }
        ],
        "query_text": "gloom card game"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502737070362274"
          },
          {
            "timestamp_usec": "1502737077604077"
          },
          {
            "timestamp_usec": "1502737091338384"
          }
        ],
        "query_text": "kid builds nuclear reactor in shed"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502735898841647"
          }
        ],
        "query_text": "prius how to pair bluetooth"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502732882523967"
          }
        ],
        "query_text": "why do leukemia patients limit water"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502694061888277"
          }
        ],
        "query_text": "sla printer what chemical"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502694007640528"
          }
        ],
        "query_text": "sla printer"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502685900377303"
          }
        ],
        "query_text": "Scoop Microcreamery Palo Alto, CA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502685886570809"
          }
        ],
        "query_text": "good ice cream"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502684949954779"
          }
        ],
        "query_text": "kyle kenane disabled joke"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502684918052424"
          },
          {
            "timestamp_usec": "1502684931918909"
          }
        ],
        "query_text": "kyle kenane blowjob jokr"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502681202890273"
          }
        ],
        "query_text": "american hebrew academy tax records w2 2016"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502681074273099"
          }
        ],
        "query_text": "what is olin college of engineerings endowment"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502670183927055"
          },
          {
            "timestamp_usec": "1502670188422680"
          }
        ],
        "query_text": "(Current Location) -> 855 El Camino Real #75, Town & Country Village, Palo Alto, CA 94301"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502670169616468"
          }
        ],
        "query_text": "Kirk's SteakBurgers Palo Alto, CA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502670153079221"
          }
        ],
        "query_text": "The Counter Palo Alto Palo Alto, CA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502670132839334"
          }
        ],
        "query_text": "best burgers palo alto"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502670117306297"
          }
        ],
        "query_text": "Gott's Roadside Palo Alto, CA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502670104777118"
          }
        ],
        "query_text": "best burgers palo alto"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502670092198388"
          }
        ],
        "query_text": "best buy near me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502653070652191"
          }
        ],
        "query_text": "02492"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502652534881476"
          },
          {
            "timestamp_usec": "1502652825566550"
          }
        ],
        "query_text": "find bandmates"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502652512295656"
          }
        ],
        "query_text": "marketers checklist hacker news"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502652505745197"
          }
        ],
        "query_text": "marketers checklist"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502651205886876"
          }
        ],
        "query_text": "iRobot creat2"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502651055948384"
          }
        ],
        "query_text": "iRobot Create 2 ROS"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502651042950659"
          }
        ],
        "query_text": "python api design lessons learned podcast"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502650905204148"
          }
        ],
        "query_text": "maker programmable robot"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502650586602897"
          }
        ],
        "query_text": "diy robotics platforms"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502634131748743"
          },
          {
            "timestamp_usec": "1502634133541757"
          }
        ],
        "query_text": "find bandmates"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502633646366797"
          }
        ],
        "query_text": "define swot"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502633619105905"
          }
        ],
        "query_text": "define strat"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502633586221697"
          }
        ],
        "query_text": "define marcom"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502615883125613"
          },
          {
            "timestamp_usec": "1502615885412625"
          }
        ],
        "query_text": "(Current Location) -> Boston Logan International Airport (BOS), 1 Harborside Dr, Boston, MA 02128"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502597771604531"
          },
          {
            "timestamp_usec": "1502597773042489"
          },
          {
            "timestamp_usec": "1502597774256823"
          }
        ],
        "query_text": "(Current Location) -> Boston Logan International Airport (BOS), 1 Harborside Dr, Boston, MA 02128"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502597769064967"
          }
        ],
        "query_text": "Boston Logan International Airport, Harborside Dr, Boston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502584107017458"
          }
        ],
        "query_text": "define: disgorged"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502582989595682"
          },
          {
            "timestamp_usec": "1502582991976474"
          }
        ],
        "query_text": "optimum nutrition whey 1 lb"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502582050498067"
          }
        ],
        "query_text": "does gnc sell myprotein"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502581536649247"
          }
        ],
        "query_text": "str append python"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502581323502641"
          }
        ],
        "query_text": "python push"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502581255476352"
          }
        ],
        "query_text": "python find index of element in list"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502580863498889"
          }
        ],
        "query_text": "python ordered dictionary"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502580840411696"
          }
        ],
        "query_text": "python ordered set"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502579220095627"
          }
        ],
        "query_text": "node write mode append newline"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502578923946600"
          }
        ],
        "query_text": "does use strict change truthy"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502577922738869"
          }
        ],
        "query_text": "sublime search including control characters"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502576742256089"
          }
        ],
        "query_text": "node use strict"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502576405793613"
          }
        ],
        "query_text": "use strict"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502576135725110"
          }
        ],
        "query_text": "node module exports"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502576130753825"
          }
        ],
        "query_text": "node module exports schema"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502576122327639"
          }
        ],
        "query_text": "node imports and exports"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502575575355219"
          }
        ],
        "query_text": "eslint how to debug"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502575367233955"
          }
        ],
        "query_text": "node set breakpoint"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502575147675085"
          }
        ],
        "query_text": "mdn fs writefile"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502575011506241"
          }
        ],
        "query_text": "mdn error"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502574977758170"
          }
        ],
        "query_text": "node get current executing directory"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502574951968819"
          }
        ],
        "query_text": "node write to file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502574920777920"
          }
        ],
        "query_text": "javascript log error to log file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502574690240736"
          }
        ],
        "query_text": "javascript try catch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502561831495775"
          }
        ],
        "query_text": "log base 7 of 6"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502561762271553"
          }
        ],
        "query_text": "log base 7 of 49"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502556061307563"
          }
        ],
        "query_text": "wolfram alpha"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502556049771093"
          },
          {
            "timestamp_usec": "1502556053036799"
          }
        ],
        "query_text": "mathematica"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502552239592084"
          }
        ],
        "query_text": "does spacex only hire c++ engineers"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502551948476834"
          }
        ],
        "query_text": "spacex software engineer intern interview questions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502551740391635"
          }
        ],
        "query_text": "ask hn best internships"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502551086940006"
          }
        ],
        "query_text": "ask hn who is hiring july"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502551024245471"
          }
        ],
        "query_text": "ask hn who is hiring search"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502550945600580"
          }
        ],
        "query_text": "ask hn best places to intern"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502550688636554"
          }
        ],
        "query_text": "what is spacex technical interview like"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502495657411952"
          },
          {
            "timestamp_usec": "1502495661677324"
          }
        ],
        "query_text": "(Current Location) -> The Riot Theater, 146A South St, Jamaica Plain, MA 02130"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502495656215245"
          }
        ],
        "query_text": "The Riot Theater, 146A South St, Jamaica Plain, MA 02130"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502490322407753"
          }
        ],
        "query_text": "(Current Location) -> 3706 Washington St, Jamaica Plain, MA 02130"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502490314696337"
          }
        ],
        "query_text": "Tikki Masala Indian Restaurant Jamaica Plain, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502490292335581"
          },
          {
            "timestamp_usec": "1502490297129623"
          },
          {
            "timestamp_usec": "1502490308808418"
          }
        ],
        "query_text": "indian food jamaica plains cheap"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502490276474412"
          }
        ],
        "query_text": "indian food jamaica plains"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502490246889105"
          }
        ],
        "query_text": "Best cheap Indian food Jamaica plains"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502490231617592"
          }
        ],
        "query_text": "best cheap indian food jp"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502490200273587"
          },
          {
            "timestamp_usec": "1502490201328004"
          }
        ],
        "query_text": "(Current Location) -> 1295 Broadway, Somerville, MA 02144"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502490188224487"
          }
        ],
        "query_text": "Guru the Caterer Somerville, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502490182091108"
          }
        ],
        "query_text": "JMP Fine Indian Cuisine Boston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502490144097096"
          },
          {
            "timestamp_usec": "1502490150463675"
          },
          {
            "timestamp_usec": "1502490161215319"
          }
        ],
        "query_text": "best cheap indian food jp"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502487882385305"
          },
          {
            "timestamp_usec": "1502487889436894"
          }
        ],
        "query_text": "best cheap indian food jamaica plains"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502487868986137"
          }
        ],
        "query_text": "best cheap indian food harvsrd sw"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502487847019690"
          },
          {
            "timestamp_usec": "1502487853584858"
          }
        ],
        "query_text": "best indian food harvsrd sw"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502487838524354"
          }
        ],
        "query_text": "best cheap thai food jamaica plains"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502487833261572"
          }
        ],
        "query_text": "(Current Location) -> The Riot Theater, 146A South St, Jamaica Plain, MA 02130"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502487589125737"
          },
          {
            "timestamp_usec": "1502487593408434"
          }
        ],
        "query_text": "best cheap thai food jamaica plains"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502487477208615"
          },
          {
            "timestamp_usec": "1502487554022842"
          },
          {
            "timestamp_usec": "1502487572742145"
          }
        ],
        "query_text": "best cheap thai food boston harvard square"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502487442563915"
          },
          {
            "timestamp_usec": "1502487449512937"
          }
        ],
        "query_text": "best cheap thai food boston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502485140548420"
          }
        ],
        "query_text": "(Current Location) -> The Riot Theater, 146A South St, Jamaica Plain, MA 02130"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502485131460795"
          },
          {
            "timestamp_usec": "1502485135231625"
          }
        ],
        "query_text": "the riot theatre boston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502482032492037"
          }
        ],
        "query_text": "how to bring up google chrome task manager"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502476600746173"
          }
        ],
        "query_text": "(Current Location) -> Tulip, 561 Windsor St., B402, Somerville, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502476600459114"
          }
        ],
        "query_text": "Tulip, 561 Windsor St., B402, Somerville, MA 02143"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502476541877544"
          }
        ],
        "query_text": "python api design lessons learned podcast"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502473642465615"
          }
        ],
        "query_text": "Olin College of Engineering"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502473530257661"
          }
        ],
        "query_text": "talk in the design if python"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502473462369627"
          }
        ],
        "query_text": "the design of python video"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502472971285247"
          }
        ],
        "query_text": "olin it wiki"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502472305807503"
          }
        ],
        "query_text": "sublime flow plugin see types"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502472279560221"
          }
        ],
        "query_text": "maybe type not refining correctly flow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502471592397415"
          }
        ],
        "query_text": "comedysportz boston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502471140297033"
          }
        ],
        "query_text": "optional types flow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502470653513712"
          }
        ],
        "query_text": "js append"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502470166714999"
          }
        ],
        "query_text": "ubuntu computer turns off randomly"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502466280753875"
          }
        ],
        "query_text": "slack phabricator plugin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502462817308794"
          }
        ],
        "query_text": "intro to vim"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502462518702645"
          }
        ],
        "query_text": "vim vs sublime"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502462304742462"
          }
        ],
        "query_text": "ubuntu power user setup tips"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502462012593589"
          }
        ],
        "query_text": "ubuntu 16.04 vs 14.04 major changes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502461961813991"
          }
        ],
        "query_text": "extending ubuntu battery life"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502408113935264"
          }
        ],
        "query_text": "regexp javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502407674940360"
          }
        ],
        "query_text": "str.match javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502407068168644"
          }
        ],
        "query_text": "javascript for in loop for array"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502406759794724"
          }
        ],
        "query_text": "for loop in javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502406444828863"
          }
        ],
        "query_text": "does some return early javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502406435298382"
          }
        ],
        "query_text": "any each element in a list javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502406426719324"
          }
        ],
        "query_text": "or each element in a list javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502406194595831"
          }
        ],
        "query_text": "directory-tree node"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502405486108836"
          }
        ],
        "query_text": "return value from callback"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502405423885885"
          }
        ],
        "query_text": "qfgets [rpcess;omes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502404751532747"
          }
        ],
        "query_text": "fast file reading javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502404669581519"
          }
        ],
        "query_text": "node fast synchronous file read"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502404245615697"
          }
        ],
        "query_text": "get value out of setimmediate"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502404179447878"
          }
        ],
        "query_text": "setImmediate"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502401455630895"
          }
        ],
        "query_text": "lodash clone"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502401333058888"
          }
        ],
        "query_text": "js copy object"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502400322828105"
          }
        ],
        "query_text": "git stash pop pick"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502400280474143"
          }
        ],
        "query_text": "git stash show changes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502399532415832"
          }
        ],
        "query_text": "what day of the week is new years 2021"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502399267435523"
          }
        ],
        "query_text": "does new years day ever fall on a saturday"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502398403553916"
          }
        ],
        "query_text": "white noise"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502393261416919"
          }
        ],
        "query_text": "when is new years observed"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502391160053716"
          }
        ],
        "query_text": "do people have work off for christmas eve"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502390934507226"
          }
        ],
        "query_text": "september 4th 2017 holiday"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502390917921466"
          }
        ],
        "query_text": "september 3rd"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502390877303432"
          }
        ],
        "query_text": "king crimson boston 2017"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502386383842985"
          }
        ],
        "query_text": "is new year's eve a federal holiday"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502386327466297"
          }
        ],
        "query_text": "do people have work off for new years eve"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502386238997560"
          }
        ],
        "query_text": "do people have off for new years eve"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502386215379748"
          },
          {
            "timestamp_usec": "1502386218857736"
          }
        ],
        "query_text": "when is new years"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502386206387644"
          }
        ],
        "query_text": "new years"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502385733373892"
          }
        ],
        "query_text": "is null error javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502384645167251"
          }
        ],
        "query_text": "eslint fix sublime"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502384639507361"
          }
        ],
        "query_text": "prettier js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502384627750312"
          }
        ],
        "query_text": "prettier editor integration"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502384613567479"
          }
        ],
        "query_text": "run eslint --fix on code sublime"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502384607562907"
          }
        ],
        "query_text": "run eslint --fix on code"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502384534584237"
          }
        ],
        "query_text": "prettier-eslint sublime plugin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502384388231259"
          }
        ],
        "query_text": "have prettier use eslint rules"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502384196834858"
          }
        ],
        "query_text": "make prettier use eslint rules"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502383764276347"
          }
        ],
        "query_text": "what does prettier do js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502383760532244"
          }
        ],
        "query_text": "what does prettier do"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502383739869090"
          }
        ],
        "query_text": "sublime eslint fix"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502383534730015"
          }
        ],
        "query_text": "prettier sublime"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502383510437946"
          }
        ],
        "query_text": "prettifyjs eslint"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502383415291504"
          }
        ],
        "query_text": "sublime prettify"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502383377724792"
          }
        ],
        "query_text": "prettify"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502382890120706"
          }
        ],
        "query_text": "javascript throw new error"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502380651417949"
          }
        ],
        "query_text": "october 25 2016"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502380178694510"
          }
        ],
        "query_text": "git add ours"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502379889221831"
          }
        ],
        "query_text": "what are your favorite git aliases"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502379669487774"
          }
        ],
        "query_text": "better git log view"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502377123205808"
          }
        ],
        "query_text": "(Current Location) -> Tulip, 561 Windsor St., B402, Somerville, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502377122902792"
          }
        ],
        "query_text": "Tulip, 561 Windsor St., B402, Somerville, MA 02143"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502375934422294"
          }
        ],
        "query_text": "725 Concord Ave, Cambridge, MA 02138"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502321634518412"
          }
        ],
        "query_text": "wait for recursive asynchronous function node"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502321436691508"
          }
        ],
        "query_text": "node will return exit a loop"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502320971254698"
          }
        ],
        "query_text": "get return from setimmediate"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502320620444846"
          }
        ],
        "query_text": "node what is setImmediate"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502319743042033"
          }
        ],
        "query_text": "node build tree from directory"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502319562863111"
          }
        ],
        "query_text": "npm save-dev"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502319418889425"
          }
        ],
        "query_text": "javascript readdir recu"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502319364336565"
          }
        ],
        "query_text": "javascript remove last character"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502319200679021"
          }
        ],
        "query_text": "node how fast is readdir"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502319158437411"
          }
        ],
        "query_text": "node iterate through all files in directory"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502318514647176"
          }
        ],
        "query_text": "grep get first instance and stop"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502318503752609"
          }
        ],
        "query_text": "awk get first instance and stop"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502318500065811"
          }
        ],
        "query_text": "ack get first instance and stop"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502318333819625"
          }
        ],
        "query_text": "ubuntu how to run ack"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502318276892685"
          }
        ],
        "query_text": "ack get first instance"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502317743889697"
          }
        ],
        "query_text": "node execute grep"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502317686659662"
          }
        ],
        "query_text": "javascript find unused functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502317663855144"
          },
          {
            "timestamp_usec": "1502317665738039"
          }
        ],
        "query_text": "find usages of code in codebase javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502317026156819"
          }
        ],
        "query_text": "bashrc customize prompt"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502316362122561"
          }
        ],
        "query_text": "git using advanced rebase features"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502316354497865"
          }
        ],
        "query_text": "git using advanced redux features"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502315765038164"
          }
        ],
        "query_text": "wednesday boston wc swing dance"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502315756038043"
          }
        ],
        "query_text": "wednesday boston swing dance"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502315470384501"
          }
        ],
        "query_text": "bashrc syntax error near unexpected token"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502315172716136"
          }
        ],
        "query_text": "bash function pass all arguments"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502315089787594"
          }
        ],
        "query_text": "bash pass all arguments to script"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502315028782080"
          }
        ],
        "query_text": "bash test if got argument"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502314927842833"
          }
        ],
        "query_text": "bash function if"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502314753027872"
          }
        ],
        "query_text": "bash functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502314518033295"
          }
        ],
        "query_text": "bash advanced aliasing"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502313815277302"
          }
        ],
        "query_text": "git branch filter by last date"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502303235732880"
          }
        ],
        "query_text": "thunk action creator signature"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502302298081959"
          }
        ],
        "query_text": "immutable key is in map"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502302079778463"
          }
        ],
        "query_text": "redux call action from action"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502302010375826"
          }
        ],
        "query_text": "calling actions from reducers redux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502301668249471"
          }
        ],
        "query_text": "unexpected lexical declaration in case block"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502300432489013"
          }
        ],
        "query_text": "immutable toIMmutable"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502300422643192"
          }
        ],
        "query_text": "immutable js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502292962583206"
          }
        ],
        "query_text": "ack search order"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502292936895431"
          }
        ],
        "query_text": "grep search order"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502292765814592"
          }
        ],
        "query_text": "ack specify starting file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502292753707563"
          }
        ],
        "query_text": "ack specify starting directory"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502292715489037"
          }
        ],
        "query_text": "ack specify traversal order"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502292692585857"
          }
        ],
        "query_text": "is ack default on osx"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502292604103443"
          }
        ],
        "query_text": "grep specify traversal order"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502233007378094"
          }
        ],
        "query_text": "dance boston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502233003231468"
          }
        ],
        "query_text": "dance"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502231642961669"
          }
        ],
        "query_text": "react shallow compare test"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502231573102501"
          }
        ],
        "query_text": "compare two react objects"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502231402829568"
          }
        ],
        "query_text": "react proptypes default values"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502231295807204"
          }
        ],
        "query_text": "compare values have no visual differences jest"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502230950223262"
          }
        ],
        "query_text": "jest expect"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502230690611338"
          }
        ],
        "query_text": "react renderer compare two dom trees jest"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502230684429745"
          }
        ],
        "query_text": "react render compare two dom trees"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502230260759611"
          }
        ],
        "query_text": "set defaults for functional component props"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502230057132041"
          }
        ],
        "query_text": "lodash is array"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502228249571961"
          }
        ],
        "query_text": "where does the name of connecticut come from"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502228101300004"
          }
        ],
        "query_text": "cyprus world map"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502228089102426"
          },
          {
            "timestamp_usec": "1502228092432436"
          }
        ],
        "query_text": "cyprus"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502227055231279"
          }
        ],
        "query_text": "faec"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502222748280967"
          }
        ],
        "query_text": "webpack dev server module not found switch branch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502222739310590"
          }
        ],
        "query_text": "webpack dev server module not found branch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502222722592459"
          }
        ],
        "query_text": "webpack dev server module not found"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502222624636935"
          }
        ],
        "query_text": "webpack dev server"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502222404766918"
          }
        ],
        "query_text": "webpack dev server crashes on git branch switch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502222383375738"
          }
        ],
        "query_text": "what is webpack dev server"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502222009433715"
          }
        ],
        "query_text": "webpack cannot resolve module when switching branches"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502221997698260"
          }
        ],
        "query_text": "webpack cannot resolve module"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502221986746882"
          }
        ],
        "query_text": "webpack dev server cannot resolve module"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502221975676648"
          }
        ],
        "query_text": "webpack dev server cannot resolve module branch switch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502219364680401"
          }
        ],
        "query_text": "here come the warm jets full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502219287611600"
          }
        ],
        "query_text": "brian eno where to get started"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502218720829903"
          }
        ],
        "query_text": "bash get last stdout"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502215951444467"
          }
        ],
        "query_text": "run eslint rules asynchronously"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502215940679862"
          }
        ],
        "query_text": "eslint run rules asynchronously"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502215534275337"
          }
        ],
        "query_text": "eslint per rule performance"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502215439042323"
          }
        ],
        "query_text": "eslint timing environment variable not displaying"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502215281778666"
          }
        ],
        "query_text": "time eslint rule"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502215272778810"
          }
        ],
        "query_text": "eslint time"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502214572499572"
          }
        ],
        "query_text": "eslint run specific rule"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502212316914932"
          }
        ],
        "query_text": "javascript escape characters"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502212251528426"
          }
        ],
        "query_text": "regex \\<"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502210240356439"
          }
        ],
        "query_text": "string to int js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502210234750315"
          }
        ],
        "query_text": "string to int"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502210054146071"
          }
        ],
        "query_text": "get first number in string javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502209935214039"
          }
        ],
        "query_text": "sanitize input remove control characters"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502209813422671"
          }
        ],
        "query_text": "convert buffer to string"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502209753983702"
          }
        ],
        "query_text": "execsync returns buffer"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502209614685239"
          }
        ],
        "query_text": "child_process buffer to string"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502209453468939"
          }
        ],
        "query_text": "node execute shell command synchronously"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502209432366854"
          }
        ],
        "query_text": "node child processes see active processes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502209315539458"
          }
        ],
        "query_text": "node cli doesn't advance to next line"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502209303642597"
          }
        ],
        "query_text": "node cli doesn't go to next line"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502208876919555"
          }
        ],
        "query_text": "child_process node cli requires extra enter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502208656922745"
          }
        ],
        "query_text": "childprocess.exec"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502208523337634"
          }
        ],
        "query_text": "grep find number of matches"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502208236778097"
          }
        ],
        "query_text": "node cli load functions from file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502206622582387"
          }
        ],
        "query_text": "node run grep"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502206405971855"
          }
        ],
        "query_text": "js ast snippets select functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502206396393757"
          }
        ],
        "query_text": "js ast snippets"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502205867361754"
          },
          {
            "timestamp_usec": "1502205985672930"
          }
        ],
        "query_text": "eslint unused funcs"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502205511448353"
          }
        ],
        "query_text": "writing your own eslint"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502205281992480"
          }
        ],
        "query_text": "grep find number of matches"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502205073766910"
          }
        ],
        "query_text": "javascript find unused functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502205058452776"
          }
        ],
        "query_text": "how to create eslint package"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502205042612438"
          }
        ],
        "query_text": "how to namespace eslint rules"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502205013452559"
          }
        ],
        "query_text": "javascript find unused functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502204941908195"
          }
        ],
        "query_text": "how to namespace eslint rules"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502204568293289"
          }
        ],
        "query_text": "you won't see me the beatles"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502204496322515"
          }
        ],
        "query_text": "youtube you won't see me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502204249139788"
          }
        ],
        "query_text": "squash commits"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502199054205264"
          }
        ],
        "query_text": "ask hn how have you automated your workflow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502165795204435"
          }
        ],
        "query_text": "tropic of cancer song"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502165672396135"
          }
        ],
        "query_text": "wikipedia gender differences"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502153560463317"
          }
        ],
        "query_text": "decreasing webpack build times"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502152084670106"
          },
          {
            "timestamp_usec": "1502152585523816"
          }
        ],
        "query_text": "(Current Location) -> Harvard Square, 18 Brattle St #352, Cambridge, MA 02138"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502152015296949"
          }
        ],
        "query_text": "Harvard Square, 18 Brattle St #352, Cambridge, MA 02138"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502149057157106"
          }
        ],
        "query_text": "string endsWIth"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502143667979679"
          }
        ],
        "query_text": "atom can't search in directory"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502142880088561"
          }
        ],
        "query_text": "node startswith function"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502142749868089"
          }
        ],
        "query_text": "escape backslash javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502142695839186"
          }
        ],
        "query_text": "javascript starts with"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502142625640082"
          }
        ],
        "query_text": "imports specifier source type"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502142461565530"
          }
        ],
        "query_text": "eslint see syntax tree generated from code"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502142442327532"
          }
        ],
        "query_text": "eslint see ast generated from code"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502141274038718"
          }
        ],
        "query_text": "eslint crashed cannot read property length of undefined"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502141001182861"
          }
        ],
        "query_text": "eslint node api"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502140944023685"
          }
        ],
        "query_text": "estree node"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502140213374971"
          },
          {
            "timestamp_usec": "1502140222501185"
          }
        ],
        "query_text": "creating an eslint plugin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502139881302695"
          }
        ],
        "query_text": "babel-project-relative-import"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502139706779020"
          }
        ],
        "query_text": "javascript import folder shortcuts"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502139688202476"
          }
        ],
        "query_text": "webpack client vendor"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502139232398134"
          }
        ],
        "query_text": "grep get names of files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502139160480674"
          }
        ],
        "query_text": "search all files in folder for a string ubuntu"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502138251976473"
          }
        ],
        "query_text": "defining my own eslint rule"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502137439811017"
          }
        ],
        "query_text": "making an eslint rule"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502136880292440"
          }
        ],
        "query_text": "how to cook a hot dog in the toaster oven"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502134136767590"
          }
        ],
        "query_text": "essential king crimson listening"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502133375046902"
          }
        ],
        "query_text": "phab pastebin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502132121899316"
          }
        ],
        "query_text": "eslint sort-imports"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502132050887653"
          }
        ],
        "query_text": "newline between absolute and relative imports eslint"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502131445650211"
          }
        ],
        "query_text": "_.isUndefined"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502131193102926"
          }
        ],
        "query_text": "king crimson islands full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502131188173043"
          }
        ],
        "query_text": "king c"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502130902650912"
          }
        ],
        "query_text": "ffmpeg slow down gif"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502130900976919"
          }
        ],
        "query_text": "ubuntu default video player"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502121492482999"
          }
        ],
        "query_text": "ubuntu default video player"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502121293268004"
          }
        ],
        "query_text": "ffmpeg slow down gif"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502119776888217"
          }
        ],
        "query_text": "5919260 bytes to mb"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502119771970595"
          }
        ],
        "query_text": "5919260 to mb"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502119731790475"
          }
        ],
        "query_text": "how to use top -M memory usage"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502119725975231"
          }
        ],
        "query_text": "how to use top -M"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502119688233154"
          }
        ],
        "query_text": "ls -l view megabytes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502119684106879"
          }
        ],
        "query_text": "ls -l view mb"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502119672263176"
          }
        ],
        "query_text": "5477058 bytes to mb"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502119262724647"
          }
        ],
        "query_text": "tulip interfaces"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502119060902407"
          }
        ],
        "query_text": "king crimson islands full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502119049693231"
          }
        ],
        "query_text": "king crimson albums"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502118539686973"
          }
        ],
        "query_text": "ubuntu 14.04 how to install ffmpeg"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502118474593475"
          },
          {
            "timestamp_usec": "1502118483648510"
          }
        ],
        "query_text": "avconv to convert webm to gif"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502118442897177"
          }
        ],
        "query_text": "sudo apt-get ffmpeg"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502118340512845"
          }
        ],
        "query_text": "ubuntu convert webm to gif"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502118253227324"
          }
        ],
        "query_text": "giphy maker long gifs"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502118065922044"
          },
          {
            "timestamp_usec": "1502118200866101"
          }
        ],
        "query_text": "online make video to gif"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502061817297887"
          }
        ],
        "query_text": "dropbox"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502060466150771"
          }
        ],
        "query_text": "why I traded my TV for turntable"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502059719755611"
          }
        ],
        "query_text": "what to eat with kielbasa"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502057176795540"
          }
        ],
        "query_text": "merge sort Michael school"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502056762155280"
          }
        ],
        "query_text": "reddit news russia probe"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502056293554402"
          }
        ],
        "query_text": "selection sort"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502045603473423"
          }
        ],
        "query_text": "god only knows chords"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502045590468100"
          }
        ],
        "query_text": "parks in brighton-allston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502032716425843"
          }
        ],
        "query_text": "parks near me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502032623980779"
          },
          {
            "timestamp_usec": "1502032635302493"
          }
        ],
        "query_text": "parks in brighton-allston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502032589531590"
          },
          {
            "timestamp_usec": "1502032605465594"
          }
        ],
        "query_text": "brighton vs allston map"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502032562167154"
          }
        ],
        "query_text": "brighton vs allston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502029255778155"
          }
        ],
        "query_text": "sorting algorithms mycodeschool"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502029234937748"
          }
        ],
        "query_text": "data scientist salary"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502028465668429"
          },
          {
            "timestamp_usec": "1502028781013165"
          }
        ],
        "query_text": "/m/01cx_ SFO   SFO /m/01cx_   "
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502028184829547"
          }
        ],
        "query_text": "reddit best sites for booking online"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502028142295646"
          },
          {
            "timestamp_usec": "1502028163077367"
          }
        ],
        "query_text": "/m/01cx_ SFO   SFO /m/01cx_   "
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1502028055015675"
          }
        ],
        "query_text": "google flights"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501980613185262"
          }
        ],
        "query_text": "marc maron conan"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501975248019754"
          }
        ],
        "query_text": "extra light olive oil can't get cap off filippo berio"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501975231427523"
          }
        ],
        "query_text": "extra light olive oil can't get cap off"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501970717724545"
          }
        ],
        "query_text": "project free TV"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501966000054995"
          },
          {
            "timestamp_usec": "1501966002778854"
          }
        ],
        "query_text": "project free TV"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501965955201085"
          }
        ],
        "query_text": "atlanta"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501963066113269"
          },
          {
            "timestamp_usec": "1501963069851079"
          }
        ],
        "query_text": "netflix recommendations"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501962340423793"
          },
          {
            "timestamp_usec": "1501962342775789"
          }
        ],
        "query_text": "when is sundown tonight"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501962192718710"
          }
        ],
        "query_text": "newport jazz fest schedule"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501957747918629"
          }
        ],
        "query_text": "Marc Maron conan O'Brien 1992"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501954570854583"
          }
        ],
        "query_text": "madlib documentary"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501954563164434"
          }
        ],
        "query_text": "madlib"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501953903468047"
          },
          {
            "timestamp_usec": "1501953909645381"
          },
          {
            "timestamp_usec": "1501953921061111"
          }
        ],
        "query_text": "puff daddy"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501948536092590"
          }
        ],
        "query_text": "weather newport ri"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501908506831206"
          }
        ],
        "query_text": "carisha"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501906568218549"
          }
        ],
        "query_text": "reddit news russia probe"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501906469629731"
          }
        ],
        "query_text": "russia investigation"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501875158017692"
          }
        ],
        "query_text": "git rebase use master"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501869831423421"
          }
        ],
        "query_text": "gaslamp killer full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501869819443263"
          }
        ],
        "query_text": "gaslamp killer"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501868554891597"
          }
        ],
        "query_text": "ppa git"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501867674325118"
          }
        ],
        "query_text": "grep with regex"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501867650596438"
          }
        ],
        "query_text": "grep with a star"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501867510884989"
          }
        ],
        "query_text": "eslint cli tool"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501865149073953"
          }
        ],
        "query_text": "iphone do not disturb not working"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501864804981792"
          }
        ],
        "query_text": "arrow-body-style"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501864465876279"
          }
        ],
        "query_text": "eslint prefer named functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501863634006399"
          }
        ],
        "query_text": "eslint rules"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501862415947302"
          }
        ],
        "query_text": "jest 16 segfault"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501861790150028"
          }
        ],
        "query_text": "sublime package control"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501861742307209"
          }
        ],
        "query_text": "how to use sublimerge"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501861574775431"
          }
        ],
        "query_text": "sublime git merging packages"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501861497173977"
          }
        ],
        "query_text": "better ui for merge conflicts sublime"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501861486583549"
          }
        ],
        "query_text": "better cli for viewing git diffs"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501860291859475"
          }
        ],
        "query_text": "TypeError: [KEYS.Q,KEYS.ENTER,KEYS.A,KEYS.O,KEYS.P].includes is not a function at ReadStream.key (/home/jspear/Tulip/tulip/environments/cloud/Central/factory/node_modules/jest-cli/build/jest.js:366:54) at emitOne (events.js:77:13) at ReadStream.emit (events.js:169:7) at readableAddChunk (_stream_readable.js:153:18) at ReadStream.Readable.push (_stream_readable.js:111:10) at TTY.onread (net.js:540:20)"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501857136493447"
          }
        ],
        "query_text": "eslint no unused functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501856978087812"
          }
        ],
        "query_text": "eslint find all functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501855524650406"
          }
        ],
        "query_text": "writing an eslint rule"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501854757893460"
          }
        ],
        "query_text": "eslint js parser"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501854545921716"
          }
        ],
        "query_text": "JavaScript linter see unused functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501854534417511"
          }
        ],
        "query_text": "JavaScript linter see on use functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501854498989582"
          }
        ],
        "query_text": "javascript show functions that are not called multiple times tool"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501854471661776"
          }
        ],
        "query_text": "javascript show functions that are not called multiple times"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501853646394881"
          }
        ],
        "query_text": "learning to read assembly"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501827221065483"
          }
        ],
        "query_text": "newport jazz festival 2017 lineup"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501816509616508"
          }
        ],
        "query_text": "going blank again full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501816501815542"
          }
        ],
        "query_text": "going blade again full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501815503088537"
          }
        ],
        "query_text": "arc diff override diff"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501814159753976"
          }
        ],
        "query_text": "find a string in all files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501814109164527"
          }
        ],
        "query_text": "The babel/arrow-parens rule is deprecated. Please use the built in arrow-parens rule instead"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501813912209840"
          }
        ],
        "query_text": "arrow-parens"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501812545516420"
          }
        ],
        "query_text": "arc diff from branch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501808573684000"
          },
          {
            "timestamp_usec": "1501808586135001"
          },
          {
            "timestamp_usec": "1501808613094000"
          },
          {
            "timestamp_usec": "1501808700545002"
          },
          {
            "timestamp_usec": "1501808712583001"
          }
        ],
        "query_text": "BOS HNL Boston, United States Honolulu, United States HNL BOS Honolulu, United States Boston, United States "
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501808402738471"
          }
        ],
        "query_text": "favorite website reddit for finding cheap flights"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501807452677035"
          }
        ],
        "query_text": "how to run specific linter from arc lint"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501807230879997"
          }
        ],
        "query_text": "object-curly-spacing"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501806110145499"
          }
        ],
        "query_text": "lodash get first property of object"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501806089269864"
          }
        ],
        "query_text": "get value of first key of object"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501801221005510"
          }
        ],
        "query_text": "mdn findindex"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501793494110549"
          },
          {
            "timestamp_usec": "1501793610738363"
          }
        ],
        "query_text": "ubuntu reinstall graphics drivers"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501793438150833"
          }
        ],
        "query_text": "ubuntu monitors freaking out"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501793161062120"
          }
        ],
        "query_text": "types of eyebrow piercings"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501792653665231"
          }
        ],
        "query_text": "lodash find index of object in array"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501789770367093"
          }
        ],
        "query_text": "online histogram maker"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501788533195492"
          }
        ],
        "query_text": "chrome dragging grey ghost"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501788373108176"
          }
        ],
        "query_text": "make text not selectable css"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501786695240527"
          },
          {
            "timestamp_usec": "1501786697467036"
          }
        ],
        "query_text": "earrings with over the ear headphones"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501785901846977"
          }
        ],
        "query_text": "how does a captive bead piercing worm"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501785718262257"
          }
        ],
        "query_text": "ring piercing size chart"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501785297021624"
          },
          {
            "timestamp_usec": "1501785300801544"
          }
        ],
        "query_text": "fake gold ring ear piercing"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501784732762874"
          }
        ],
        "query_text": "how to tell if a piercing will look good on you"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501784190897918"
          }
        ],
        "query_text": "there must be a space after the array type annotation eslint"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501784143824004"
          }
        ],
        "query_text": "good first piercings guy"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501783911882729"
          }
        ],
        "query_text": "space after type colon"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501783812460243"
          }
        ],
        "query_text": "there must be a space after the array type annotation eslint"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501783802726503"
          }
        ],
        "query_text": "there must be a space after the array type annotation"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501782024614929"
          }
        ],
        "query_text": "npm semantic ui react checkbox"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501781241216078"
          },
          {
            "timestamp_usec": "1501781293281145"
          }
        ],
        "query_text": "atlassian web ui kit"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501781222907493"
          }
        ],
        "query_text": "atlassian checkbox"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501781207103181"
          }
        ],
        "query_text": "toggle slider ui"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501779480187625"
          }
        ],
        "query_text": "sublime surround code with braces and auto indent"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501778721246858"
          }
        ],
        "query_text": "react no useless constructor"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501776981256401"
          }
        ],
        "query_text": "react component lifecycle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501776760849393"
          }
        ],
        "query_text": "change last commit message"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501775627171029"
          }
        ],
        "query_text": "going blank again full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501774691963720"
          }
        ],
        "query_text": "lodash compare if arrays have same values"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501774673087041"
          }
        ],
        "query_text": "compare if two arrays have same elements javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501774400910320"
          }
        ],
        "query_text": "meteor mongo $set"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501773875721502"
          }
        ],
        "query_text": "react component lifecycle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501773498851275"
          }
        ],
        "query_text": "flow convert string enum to string"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501773486629070"
          }
        ],
        "query_text": "convert string to enum flow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501773329754079"
          }
        ],
        "query_text": "going blank again full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501773103664298"
          }
        ],
        "query_text": "refining maybe types flow doesn't work with filter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501772282964859"
          }
        ],
        "query_text": "what facial piercing would look good on me guy"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501772223114518"
          }
        ],
        "query_text": "low upkeep piercings"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501770728118282"
          }
        ],
        "query_text": "mbv full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501769490107193"
          }
        ],
        "query_text": "jest unmock directory"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501768668856285"
          }
        ],
        "query_text": "reddit"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501768235869539"
          }
        ],
        "query_text": "alternatives to common proof of work functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501767097332922"
          }
        ],
        "query_text": "what is a birthday collision"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501766185312093"
          }
        ],
        "query_text": "bitcoin what is nonce"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501766023407249"
          }
        ],
        "query_text": "algorithms used in bitcoin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501765841091758"
          }
        ],
        "query_text": "differences between cryptocurrencies"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501732480574910"
          }
        ],
        "query_text": "(Current Location) -> 102 Chester St, Allston, MA 02134"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501731363106659"
          }
        ],
        "query_text": "(Current Location) -> 37 Oxford Circle, Belmont, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501731362825717"
          }
        ],
        "query_text": "37 Oxford Cir, Belmont, MA 02478"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501719725860641"
          }
        ],
        "query_text": "The Cambridge Masonic Hall, Cambridge Masonic Hall, 1950 Massachusetts Ave, Cambridge, MA 02140"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501718546447780"
          },
          {
            "timestamp_usec": "1501718547026724"
          },
          {
            "timestamp_usec": "1501718548909718"
          }
        ],
        "query_text": "(Current Location) -> The Cambridge Masonic Hall, Cambridge Masonic Hall, 1950 Massachusetts Ave, Cambridge, MA 02140"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501718545249758"
          }
        ],
        "query_text": "The Cambridge Masonic Hall, Cambridge Masonic Hall, 1950 Massachusetts Ave, Cambridge, MA 02140"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501708987121413"
          }
        ],
        "query_text": "(Current Location) -> 37 Oxford Cir, Belmont, MA 02478"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501708985985192"
          }
        ],
        "query_text": "37 Oxford Cir, Belmont, MA 02478"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501708236551199"
          }
        ],
        "query_text": "filter cannot be called on any type intersection"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501706944132515"
          }
        ],
        "query_text": "newError.stack"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501706262956640"
          }
        ],
        "query_text": "silicone iphone 6s case"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501706253564421"
          }
        ],
        "query_text": "apple iphone 6s case"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501706159987777"
          }
        ],
        "query_text": "better alternatives to apple smart cover"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501706078371095"
          }
        ],
        "query_text": "best ipad 9.7 magnetic case"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501706070716765"
          }
        ],
        "query_text": "best ipad 9.7 screen protector"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501704177982600"
          }
        ],
        "query_text": "ubuntu how to turn screen reader off"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501701635243127"
          }
        ],
        "query_text": "chrome plugin screen recorder"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501701466313597"
          }
        ],
        "query_text": "online screen recorder gif"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501701461863347"
          }
        ],
        "query_text": "online screen recorder"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501701323284544"
          }
        ],
        "query_text": "how to run an installed snap package"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501701268879047"
          }
        ],
        "query_text": "WARNING: XAUTHORITY environment value is not a clean path:"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501701187443676"
          }
        ],
        "query_text": "ubuntu /snap/peek/222/command-peek.wrapper: 2: exec: desktop-launch: not found"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501701176009128"
          }
        ],
        "query_text": "/snap/peek/222/command-peek.wrapper: 2: exec: desktop-launch: not found"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501700957639705"
          }
        ],
        "query_text": "peek install not working 14.04"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501700929237983"
          }
        ],
        "query_text": "ubuntu failed to fetch peek binary"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501700743762416"
          },
          {
            "timestamp_usec": "1501700749538977"
          }
        ],
        "query_text": "gifine install ubuntu 14.04"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501700711971147"
          }
        ],
        "query_text": "ubuntu gif recorder"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501700374096773"
          }
        ],
        "query_text": "ubuntu make a gif"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501698908720232"
          }
        ],
        "query_text": "filterValues lodash"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501698792044719"
          }
        ],
        "query_text": "lodash preserve keys filter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501698745823945"
          }
        ],
        "query_text": "lodash filter map without getting rid of keys"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501698486912389"
          }
        ],
        "query_text": "lodash filter returns a list rather than an object"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501697699098778"
          }
        ],
        "query_text": "javascript all falsy"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501697530078752"
          }
        ],
        "query_text": "js are all values in array true"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501697303107533"
          }
        ],
        "query_text": "test if array is all nulls"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501695957830662"
          }
        ],
        "query_text": "chai expect no exception to be thrown"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501695934556454"
          }
        ],
        "query_text": "jest check that no exception is thrown"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501694349624767"
          }
        ],
        "query_text": "how to merge two lists js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501693432096715"
          }
        ],
        "query_text": "lodash map object"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501688148966308"
          }
        ],
        "query_text": "map object javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501686643453432"
          }
        ],
        "query_text": "proptype is defined but prop is never used"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501686041126463"
          }
        ],
        "query_text": "mongo remove all but one element"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501686026213015"
          }
        ],
        "query_text": "mongo get ids of all items in collection"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501686023399355"
          }
        ],
        "query_text": "mongo get ids of all items in collections"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501685924930694"
          }
        ],
        "query_text": "javascript size of array"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501685856703349"
          }
        ],
        "query_text": "is an empty list falsy"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501685221759837"
          },
          {
            "timestamp_usec": "1501685227922295"
          }
        ],
        "query_text": "react component lifecycle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501684592138566"
          }
        ],
        "query_text": "easily go back and forward commits"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501684461156602"
          }
        ],
        "query_text": "tulip design"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501684393860461"
          }
        ],
        "query_text": "toggle switch web ui"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501684389406028"
          }
        ],
        "query_text": "toggle switch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501684378270734"
          }
        ],
        "query_text": "atlassian toggle switch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501684204324073"
          }
        ],
        "query_text": "atlassian web ui kit"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501684190991334"
          }
        ],
        "query_text": "alternatives to radio button"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501683887942002"
          }
        ],
        "query_text": "glasses that don't smudge"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501683388803136"
          }
        ],
        "query_text": "atlassian web ui"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501683377336687"
          }
        ],
        "query_text": "atlassian webkit"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501683370538587"
          }
        ],
        "query_text": "atlassian"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501681817328133"
          }
        ],
        "query_text": "you won't see me by the Beatles YouTube"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501626153679185"
          }
        ],
        "query_text": "oil change findlay"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501622226772031"
          }
        ],
        "query_text": "dance boston tuesdays"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501621535521670"
          }
        ],
        "query_text": "fedex allston when does it close"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501621315012417"
          }
        ],
        "query_text": "102 chester st allston ma"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501620623879845"
          }
        ],
        "query_text": "apple buy an iphone 6 apple store"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501620368204868"
          }
        ],
        "query_text": "what is dns-sd"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501618398586255"
          }
        ],
        "query_text": "react component lifecycle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501617352003520"
          }
        ],
        "query_text": "lodash map"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501617342269493"
          }
        ],
        "query_text": "underscore map"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501617335376138"
          }
        ],
        "query_text": "underscore map through object keys and values"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501617239941485"
          }
        ],
        "query_text": "iterate through keys and values in js object"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501616972907661"
          }
        ],
        "query_text": "phab paste"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501615472887779"
          }
        ],
        "query_text": "immutable.js fromJS to immutable"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501615428623950"
          }
        ],
        "query_text": "serialize immutable.js object"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501615417873791"
          }
        ],
        "query_text": "get immutable as copyable object immutable.js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501615411082420"
          }
        ],
        "query_text": "get immutable as copyable object"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501615234701201"
          }
        ],
        "query_text": "redux dev console get state"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501611392932582"
          }
        ],
        "query_text": "immutable.js docs"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501611260223415"
          }
        ],
        "query_text": "immutable console extension"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501610680496049"
          },
          {
            "timestamp_usec": "1501610810851225"
          }
        ],
        "query_text": "immutable get name of key"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501609247681185"
          }
        ],
        "query_text": "redux using a selector from inside an action creator"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501609026163595"
          }
        ],
        "query_text": "meteor update collection"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501608741030985"
          }
        ],
        "query_text": "meteor mongo update syntax"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501608732376664"
          }
        ],
        "query_text": "mongo update syntax"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501608284889442"
          }
        ],
        "query_text": "mongodb remove all"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501605526527021"
          }
        ],
        "query_text": "Provider> does not support changing `store` on the fly."
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501604460179344"
          }
        ],
        "query_text": "flow union of list"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501604422771936"
          }
        ],
        "query_text": "flow union types"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501603979434866"
          }
        ],
        "query_text": "lodash update"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501603053180424"
          }
        ],
        "query_text": "lodash filter list of objects that contain certain props"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501602807169646"
          }
        ],
        "query_text": "white noise"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501602136972136"
          }
        ],
        "query_text": "how to show a file from a different branch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501600103718969"
          }
        ],
        "query_text": "are non-managed inputs an antipattern react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501599992456741"
          }
        ],
        "query_text": "are non-managed inputs an antipattern"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501599935163091"
          }
        ],
        "query_text": "open terminal command"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501599820470088"
          }
        ],
        "query_text": "ubuntu automatically open applications and put them in correct windows"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501599207537999"
          }
        ],
        "query_text": "ubuntu run command on startup"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501599040306709"
          }
        ],
        "query_text": "what does chmod +x do?"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501598907110097"
          }
        ],
        "query_text": "what does chmod do?"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501598869620298"
          }
        ],
        "query_text": "how to make a command executable without sudo linux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501598788644535"
          }
        ],
        "query_text": "how to see permissions of a file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501598596536011"
          }
        ],
        "query_text": "sbin directory that doesn't require sudo"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501598188543306"
          }
        ],
        "query_text": "What's the difference between bin and sbin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501597401426144"
          }
        ],
        "query_text": "make sublime commands and command line commands the same"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501597311544174"
          }
        ],
        "query_text": "bash shortcuts you didn't know about"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501597272431908"
          }
        ],
        "query_text": "ubuntu screens don't save display settings"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501594179021671"
          }
        ],
        "query_text": "front end web dev podcasts ask hn"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501594153019346"
          }
        ],
        "query_text": "front end web dev podcasts"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501593749615488"
          }
        ],
        "query_text": "redux do you store value of text inputs in state"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501592419655601"
          }
        ],
        "query_text": "what's the difference between docker and kubernetes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501549283655878"
          }
        ],
        "query_text": "let me watch this"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501543650941501"
          }
        ],
        "query_text": "bill browder email"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501543546706052"
          }
        ],
        "query_text": "what is the net worth of putin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501537177903591"
          }
        ],
        "query_text": "react setstate"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501536150996277"
          }
        ],
        "query_text": "are javascript objects maps"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501536146977663"
          }
        ],
        "query_text": "are javascript objects map"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501536020960483"
          }
        ],
        "query_text": "object literal this type is incompatible with map"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501535734894962"
          }
        ],
        "query_text": "symbol to string tag flow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501535726073767"
          }
        ],
        "query_text": "symbol to string tag"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501535437952225"
          }
        ],
        "query_text": "javascript ordered map"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501535116084637"
          }
        ],
        "query_text": "working with maps in javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501535078928628"
          }
        ],
        "query_text": "maps in javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501535036513641"
          }
        ],
        "query_text": "flow typing a map object"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501534856306897"
          }
        ],
        "query_text": "map types flow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501534810823709"
          }
        ],
        "query_text": "flow types"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501534496859813"
          }
        ],
        "query_text": "lodash find one"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501533948918796"
          }
        ],
        "query_text": "set state set nested state"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501530116156245"
          }
        ],
        "query_text": "meteor update collection"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501529819323440"
          }
        ],
        "query_text": "see how long synchronous query takes redux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501529273074963"
          }
        ],
        "query_text": "stash all staged files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501529182877817"
          }
        ],
        "query_text": "unstage last commit"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501526163604132"
          }
        ],
        "query_text": "immutable get first"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501526114495975"
          }
        ],
        "query_text": "redux dev tools get state"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501526066128519"
          }
        ],
        "query_text": "immutable getFirstin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501522505736226"
          }
        ],
        "query_text": "mdn padding"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501518839796140"
          }
        ],
        "query_text": "brackethighlighter react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501516199225727"
          }
        ],
        "query_text": "using proptypes with flow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501515844618993"
          }
        ],
        "query_text": "import es6 when is a leading slash okay?"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501515132033597"
          }
        ],
        "query_text": "es6 import leading slash"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501515107734166"
          }
        ],
        "query_text": "es6 import json"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501515045701931"
          }
        ],
        "query_text": "eslint import plugin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501514648284742"
          }
        ],
        "query_text": "git stash certain files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501514572832472"
          }
        ],
        "query_text": "stash only commited files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501514120925402"
          }
        ],
        "query_text": "eslint prefer named function"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501514095784408"
          }
        ],
        "query_text": "eslint prefer arrow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501513214571833"
          }
        ],
        "query_text": "What do you call the class that holds the provider redux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501512922559455"
          }
        ],
        "query_text": "how to check if state is falsy but not 0"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501512485760709"
          }
        ],
        "query_text": "what does thunk do"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501512268848149"
          }
        ],
        "query_text": "eslint no trailing backslash in import statements"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501512253002545"
          }
        ],
        "query_text": "eslint no trailing backend in import statements"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501472012716932"
          },
          {
            "timestamp_usec": "1501472014629152"
          }
        ],
        "query_text": "yukos"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501470725971609"
          }
        ],
        "query_text": "bill browder c span"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501455030426362"
          }
        ],
        "query_text": "wikipedia william browder"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501443364277626"
          }
        ],
        "query_text": "reddit advice animals"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501273197426847"
          }
        ],
        "query_text": "immutable map set"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501271589704834"
          }
        ],
        "query_text": "react no useless constructor"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501271551394070"
          }
        ],
        "query_text": "no useless constructor"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501271322215573"
          }
        ],
        "query_text": "prefer default export"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501270250365439"
          }
        ],
        "query_text": "prop types"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501269868940633"
          }
        ],
        "query_text": "flowtyped cli"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501269864583619"
          }
        ],
        "query_text": "flowtype cli"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501269856431457"
          }
        ],
        "query_text": "flowtype react-redux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501269712567166"
          }
        ],
        "query_text": "using proptypes with flow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501267572638961"
          }
        ],
        "query_text": "eslint prefer arrow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501264925063021"
          }
        ],
        "query_text": "create store"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501264921408946"
          }
        ],
        "query_text": "create stored procedure"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501263793099422"
          }
        ],
        "query_text": "mapdispatchtoprops"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501263789464822"
          }
        ],
        "query_text": "google mapdispatchtoprops"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501263781544527"
          }
        ],
        "query_text": "google map dispatch to props"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501261738768251"
          },
          {
            "timestamp_usec": "1501261745011922"
          }
        ],
        "query_text": "d'angelo and the vanguard"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501261508062019"
          }
        ],
        "query_text": "olin college calendar 2017"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501260871127656"
          }
        ],
        "query_text": "react lifecycle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501259935292914"
          }
        ],
        "query_text": "rebase vs rebase -i"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501259862731006"
          }
        ],
        "query_text": "why use arc git"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501259857697787"
          }
        ],
        "query_text": "why use arc"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501259854334663"
          }
        ],
        "query_text": "why use arch linux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501259001964973"
          }
        ],
        "query_text": "how to get better at rebases"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501258784474313"
          }
        ],
        "query_text": "tig rebase"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501258251358677"
          }
        ],
        "query_text": "smoothscroll-polyfill npm"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501258242317293"
          }
        ],
        "query_text": "smoothscroll polyfill"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501254672723001"
          },
          {
            "timestamp_usec": "1501254699207530"
          },
          {
            "timestamp_usec": "1501254699703274"
          }
        ],
        "query_text": "(Current Location) -> Tulip, 561 Windsor St., B402, Somerville, MA 02143"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501254667623454"
          }
        ],
        "query_text": "(Current Location) -> Tulip, 561 Windsor St., B402, Somerville, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501254667249556"
          }
        ],
        "query_text": "Tulip, 561 Windsor St., B402, Somerville, MA 02143"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501253093493779"
          }
        ],
        "query_text": "extending eslint"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501252992808233"
          }
        ],
        "query_text": "linting for project directory trees"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501252724510606"
          }
        ],
        "query_text": "limiting for project directory trees"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501252044896838"
          }
        ],
        "query_text": "ask hn exoereinces using redux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501212972028125"
          }
        ],
        "query_text": "bone marrow donation painful"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501197917592916"
          }
        ],
        "query_text": "zev love x"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501197912728944"
          }
        ],
        "query_text": "sev love x"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501196066547038"
          }
        ],
        "query_text": "rza drug addiction"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501189105817206"
          }
        ],
        "query_text": "ludwig goransson"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501188550442753"
          }
        ],
        "query_text": "why jeff bezos bought the washington post"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501188115489552"
          }
        ],
        "query_text": "jeff bezos"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501185392997381"
          }
        ],
        "query_text": "vsauce death grips"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501183829320102"
          }
        ],
        "query_text": "blockhead"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501180711816130"
          }
        ],
        "query_text": "moment api"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501180685131690"
          }
        ],
        "query_text": "moment serialize"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501111670323339"
          }
        ],
        "query_text": "meteor router waiton"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501111668308861"
          }
        ],
        "query_text": "meteor route waitone"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501109472556186"
          }
        ],
        "query_text": "wednesday night dance boston swing dancing fools"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501109454695403"
          },
          {
            "timestamp_usec": "1501109458113262"
          }
        ],
        "query_text": "wednesday night dance boston swing"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501109346654578"
          }
        ],
        "query_text": "javascript check if number"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501106521577828"
          }
        ],
        "query_text": "meteor mongo insert many"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501104292946007"
          }
        ],
        "query_text": "mongo insert"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501101593115913"
          }
        ],
        "query_text": "outkast full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501101585800021"
          },
          {
            "timestamp_usec": "1501101588579459"
          }
        ],
        "query_text": "outkast"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501097652120939"
          },
          {
            "timestamp_usec": "1501097946416440"
          }
        ],
        "query_text": "scrollIntoView"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501097541017063"
          }
        ],
        "query_text": "react scroll to top"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501097368241368"
          }
        ],
        "query_text": "scroll to top"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501096784876322"
          }
        ],
        "query_text": "ref is null at componentDidMount"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501096369264168"
          }
        ],
        "query_text": "bash shortcut for last line"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501095073141613"
          },
          {
            "timestamp_usec": "1501095143735755"
          }
        ],
        "query_text": "react component lifecycle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501094946496251"
          }
        ],
        "query_text": "react state changing but component not rerendering"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501094548881499"
          }
        ],
        "query_text": "should not call setstate in render"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501093877430910"
          }
        ],
        "query_text": "javascript date class year"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501093687442184"
          }
        ],
        "query_text": "how to use this.setstate react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501093634557156"
          }
        ],
        "query_text": "react setstate"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501091067667176"
          }
        ],
        "query_text": "javascript does string contain int"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501091000252289"
          }
        ],
        "query_text": "javascript check that string contains only an integer"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501089254406695"
          }
        ],
        "query_text": "pulling individual files from other branch doesn't work pathspec"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501089239115028"
          }
        ],
        "query_text": "pulling individual files from other branch doesn't work"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501089225353765"
          }
        ],
        "query_text": "git checkout pathspec did not match any file(s) known to git. checkout file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501089187483508"
          }
        ],
        "query_text": "git checkout file that doesn't exist locally"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501089143099020"
          }
        ],
        "query_text": "git checkout pathspec did not match any file(s) known to git. checkout file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501089080298642"
          }
        ],
        "query_text": "git checkout pathspec did not match any file(s) known to git."
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501089020456249"
          }
        ],
        "query_text": "git checkout file not working for file that only exists on other branch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501088936458592"
          }
        ],
        "query_text": "get file from another git branch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501088229859175"
          }
        ],
        "query_text": "git rebase override all"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501088219972963"
          }
        ],
        "query_text": "git rebase use only one files version"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501087573942085"
          },
          {
            "timestamp_usec": "1501087599532827"
          }
        ],
        "query_text": "sublime auto complete selector disable in comments not working"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501087415596805"
          }
        ],
        "query_text": "autocomplete all open files sublime 3"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501087366687579"
          }
        ],
        "query_text": "All autocomplete docs sublime"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501087362941945"
          }
        ],
        "query_text": "All autocomplete docs"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501087096665878"
          }
        ],
        "query_text": "sublime don't show autocomplete in comments"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501086949856480"
          }
        ],
        "query_text": "playing to vapors bandcamp"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501086845056478"
          }
        ],
        "query_text": "sublime show column 100"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501084735557518"
          }
        ],
        "query_text": "git cherry pick"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501083851427364"
          }
        ],
        "query_text": "git merge what do <<<< === and >> mean"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501082190681802"
          }
        ],
        "query_text": "do I need a .bash_profile"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501082176663271"
          }
        ],
        "query_text": "creating a bashrc file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501081529284974"
          }
        ],
        "query_text": "linux what does col do"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501081064248110"
          }
        ],
        "query_text": "man get info on specific flag"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501081044057692"
          }
        ],
        "query_text": "man specific action ubuntu"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501081037645473"
          }
        ],
        "query_text": "man specific action"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501080962728601"
          }
        ],
        "query_text": "what is dpkg"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501080877337833"
          }
        ],
        "query_text": "why don't aliases autocomplete correctly"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501080776750937"
          }
        ],
        "query_text": "aliases with tab completion"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501076593430449"
          }
        ],
        "query_text": "danny mcclanahan github"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501043130760101"
          }
        ],
        "query_text": "wikipedia sen john mccain"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501022179347492"
          },
          {
            "timestamp_usec": "1501022180147587"
          }
        ],
        "query_text": "how to use history ubuntu"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501022172476282"
          }
        ],
        "query_text": "how to use history"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501021837570284"
          }
        ],
        "query_text": "useful shell aliases"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501021512616781"
          }
        ],
        "query_text": "aliasing path names"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501020817261876"
          }
        ],
        "query_text": "cd triple dot"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501019816948453"
          }
        ],
        "query_text": "pass yes to command unix"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501019171854019"
          }
        ],
        "query_text": "git aliases"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501018904535718"
          }
        ],
        "query_text": "bashrc alias ..."
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501012565151243"
          }
        ],
        "query_text": "type annotations require valid flow declaration"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501012363770205"
          }
        ],
        "query_text": "flow-typed smoothscroll-polyfill"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501012336840183"
          }
        ],
        "query_text": "flow module declare"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501010591360059"
          }
        ],
        "query_text": "flow type for dom node"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501008908758193"
          }
        ],
        "query_text": "react ref"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501008895313824"
          }
        ],
        "query_text": "react component lifecycle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501008081572326"
          }
        ],
        "query_text": "covariant property incompatible with contravariant use"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501006248242572"
          }
        ],
        "query_text": "scrollIntoView dizzy"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501005809908673"
          }
        ],
        "query_text": "where to put polyfill in a project"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501005763890937"
          }
        ],
        "query_text": "requestAnimationFrame"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501005694612985"
          }
        ],
        "query_text": "scrollIntoView with animation chrome polyfill"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501005572187231"
          }
        ],
        "query_text": "scrollIntoView with animation chrome"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501004542565797"
          }
        ],
        "query_text": "scrollIntoView mdn"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501004473192537"
          }
        ],
        "query_text": "scroll into view doesn't animate"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501004311070366"
          }
        ],
        "query_text": "mdn scrollintoview"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501003902921355"
          }
        ],
        "query_text": "react pass ref to parent"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501003838660492"
          }
        ],
        "query_text": "how to get ref from children"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501003807417377"
          }
        ],
        "query_text": "scrollIntoView on componentDidMount does not show animation react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501003799130331"
          }
        ],
        "query_text": "scrollIntoView on componentDidMount does not show animation"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501002929283400"
          }
        ],
        "query_text": "nano delete line"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501002323301347"
          }
        ],
        "query_text": "git move head back one commit"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501002117638183"
          }
        ],
        "query_text": "git checkout all files with regex"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501001982429755"
          }
        ],
        "query_text": "git remove files from branch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501001919199108"
          }
        ],
        "query_text": "bash what is difference between one dash and two dashes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501001750154928"
          },
          {
            "timestamp_usec": "1501001777458400"
          }
        ],
        "query_text": "git remove a branch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501001720487027"
          }
        ],
        "query_text": "move all changes from one branch to another"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501001002011353"
          }
        ],
        "query_text": "undo git reset hard get back committed changes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501000977238860"
          }
        ],
        "query_text": "undo git reset hard"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501000912676799"
          }
        ],
        "query_text": "make a branch same as master"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501000695771332"
          }
        ],
        "query_text": "grep union on two greps"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501000676511533"
          }
        ],
        "query_text": "grep -v"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501000565063552"
          }
        ],
        "query_text": "git checkout deleted files did not match any files known to git"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501000293398824"
          }
        ],
        "query_text": "git checkout deleted files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1501000025641144"
          }
        ],
        "query_text": "pathspec did not match any files known to git"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500999521610461"
          }
        ],
        "query_text": "what does xargs do?"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500999419890113"
          }
        ],
        "query_text": "pipe results to git checkout"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500999331949994"
          }
        ],
        "query_text": "how does grep -v work"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500998967122999"
          }
        ],
        "query_text": "git diff stat cuts off file names"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500998637264785"
          }
        ],
        "query_text": "git make new branch for changes only of certain files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500998627631027"
          }
        ],
        "query_text": "git see all commits that changes a certain file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500960925258081"
          }
        ],
        "query_text": "pain in inner ear and jaw keeps popping"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500944546900535"
          }
        ],
        "query_text": "mycodeschool sort"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500942769135113"
          }
        ],
        "query_text": "mycodeschool search"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500934682841426"
          }
        ],
        "query_text": "moment.year.start of is not a function"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500933527497254"
          }
        ],
        "query_text": "eslint disable rule"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500933509558101"
          }
        ],
        "query_text": "eslint disable line"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500933416584095"
          }
        ],
        "query_text": "imports is duplicated flow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500933413486670"
          }
        ],
        "query_text": "imports is duplicated"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500933406874222"
          }
        ],
        "query_text": "imports scheduling is duplicated"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500930943268024"
          }
        ],
        "query_text": "react class syntax"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500930647137799"
          }
        ],
        "query_text": "scroll view for react dom"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500930575352164"
          }
        ],
        "query_text": "react dom package"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500930473286689"
          },
          {
            "timestamp_usec": "1500930565691252"
          }
        ],
        "query_text": "react dom scrollview"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500930311697746"
          }
        ],
        "query_text": "react how to download scrollview"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500930194830858"
          }
        ],
        "query_text": "react scrollTop flexbox"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500930181942109"
          }
        ],
        "query_text": "react scrollTop"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500930055215822"
          }
        ],
        "query_text": "mdn scrollTop"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500929873852715"
          }
        ],
        "query_text": "flexbox set scrollbar position"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500929780391689"
          }
        ],
        "query_text": "react component auto scroll"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500929284084616"
          }
        ],
        "query_text": "sublime go up and down multiple lines at a time"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500927893108587"
          }
        ],
        "query_text": "git revert all commits later than a certain point"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500923703434603"
          }
        ],
        "query_text": "redux provider"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500923036253658"
          }
        ],
        "query_text": "what does awk '{print 2}' do"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500922798630242"
          }
        ],
        "query_text": "kill all results of ps -ef grep"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500922710801079"
          }
        ],
        "query_text": "formatting output of ps -ef"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500919214357963"
          }
        ],
        "query_text": "where is 380 area code"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500917298657860"
          }
        ],
        "query_text": "defining holidays programming"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500917295235596"
          }
        ],
        "query_text": "defining holidays"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500911572913356"
          }
        ],
        "query_text": "mongo see all tables"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500908323625964"
          }
        ],
        "query_text": "google docs md file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500907631477492"
          }
        ],
        "query_text": "markdown table"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500907575991367"
          }
        ],
        "query_text": "md table"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500906328582339"
          }
        ],
        "query_text": "what is a li-po battery"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500861781161999"
          }
        ],
        "query_text": "apple 9.7 smart cover without case"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500861780159208"
          }
        ],
        "query_text": "apple 9.7 smart cover"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500859959201386"
          }
        ],
        "query_text": "python bit complement"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500858954717116"
          }
        ],
        "query_text": "you can get everything you want at alice's restaurant"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500858642721122"
          },
          {
            "timestamp_usec": "1500858646035410"
          },
          {
            "timestamp_usec": "1500858692057385"
          }
        ],
        "query_text": "spiritualized"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500858629497473"
          }
        ],
        "query_text": "spaceman 3"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500857917077099"
          }
        ],
        "query_text": "python binary not makes number negative"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500857742023929"
          }
        ],
        "query_text": "python not if number is negative"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500856512882849"
          }
        ],
        "query_text": "binary numbers in python"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500854878087698"
          }
        ],
        "query_text": "wcs tips whip"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500854206903331"
          }
        ],
        "query_text": "ahmad jamal one"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500853693714740"
          }
        ],
        "query_text": "dropbox sign in"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500853660845938"
          }
        ],
        "query_text": "dropbox"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500853658988639"
          }
        ],
        "query_text": "dro"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500851600884928"
          }
        ],
        "query_text": "102 chester st allston ma"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500851101023295"
          }
        ],
        "query_text": "ipad 9.7 cover that doesn't require case"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500850928898534"
          }
        ],
        "query_text": "ipad front cover amazon 9.7 -smart"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500850923459708"
          }
        ],
        "query_text": "ipad front cover amazon 9.7"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500850915902952"
          }
        ],
        "query_text": "ipad front cover amazon"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500850904287721"
          }
        ],
        "query_text": "ipad front cover"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500850826053932"
          }
        ],
        "query_text": "apple 9.7 smart cover without case"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500850754033542"
          }
        ],
        "query_text": "apple 9.7 smart cover"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500850714057442"
          },
          {
            "timestamp_usec": "1500850717019669"
          }
        ],
        "query_text": "does apple smart cover need back case"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500850666196690"
          }
        ],
        "query_text": "best ipad 9.7 front covers"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500850654105717"
          }
        ],
        "query_text": "best ipad 9.7 covers"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500824665260746"
          }
        ],
        "query_text": "bst tree.  mycodeschool"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500824644560029"
          }
        ],
        "query_text": "bst tree"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500822485046868"
          }
        ],
        "query_text": "wc swing stop n go"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500767716593940"
          }
        ],
        "query_text": "The miseducation of Lauryn Hill"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500767707578438"
          },
          {
            "timestamp_usec": "1500767711767474"
          }
        ],
        "query_text": "Lauryn Hill"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500767705664237"
          }
        ],
        "query_text": "The miseducation of Lauryn Hill"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500766932446819"
          }
        ],
        "query_text": "Lauryn Hill"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500766927745432"
          }
        ],
        "query_text": "The miseducation of Lauryn Hill"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500765465801946"
          }
        ],
        "query_text": "players ball"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500764849419722"
          }
        ],
        "query_text": "dungeon family"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500764606610353"
          }
        ],
        "query_text": "khujo the dungeon"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500764585551510"
          },
          {
            "timestamp_usec": "1500764595529670"
          }
        ],
        "query_text": "cujo the dungeon"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500763702947611"
          }
        ],
        "query_text": "jordan pple imdb"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500676644776041"
          }
        ],
        "query_text": "(Current Location) -> South Station, Atlantic Avenue, Boston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500676395676714"
          }
        ],
        "query_text": "(Current Location) -> Lincoln, NH"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500676392107857"
          }
        ],
        "query_text": "Lincoln, NH"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500670065087608"
          }
        ],
        "query_text": "phab pastebin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500668984189179"
          }
        ],
        "query_text": "add a computed column sql server"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500668606493774"
          }
        ],
        "query_text": "postgres window functions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500668566703493"
          }
        ],
        "query_text": "must appear in group by clause"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500667919258608"
          }
        ],
        "query_text": "postgres create a view that is a single value"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500667225625218"
          }
        ],
        "query_text": "youtube optimizing correlated subqueries"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500665299262638"
          }
        ],
        "query_text": "outer join postgres"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500665169845737"
          }
        ],
        "query_text": "sql how to use joins"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500664746703585"
          }
        ],
        "query_text": "postgres what is constraint exclusion"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500664464870092"
          }
        ],
        "query_text": "pgadmin4 analyze performance"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500663985825669"
          }
        ],
        "query_text": "optimizing postgres queries"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500663356572009"
          }
        ],
        "query_text": "atom evaluate markdown"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500663197892055"
          }
        ],
        "query_text": "python ternary operator"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500663118004320"
          }
        ],
        "query_text": "python string to int"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500662995227083"
          }
        ],
        "query_text": "python get input from user"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500661209907333"
          }
        ],
        "query_text": "postgres reverse column"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500661086197664"
          }
        ],
        "query_text": "postgres generate series backwards"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500661043080853"
          }
        ],
        "query_text": "generate series postgresql"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500660856441706"
          }
        ],
        "query_text": "get dates ordered by most recent postgres"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500660819177293"
          },
          {
            "timestamp_usec": "1500660826968932"
          }
        ],
        "query_text": "limit desc postgres"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500656975806424"
          }
        ],
        "query_text": "only select unique values sql"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500656484759214"
          }
        ],
        "query_text": "date part postgres"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500656479410101"
          }
        ],
        "query_text": "date part"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500651715575814"
          }
        ],
        "query_text": "september 2016"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500650570708075"
          }
        ],
        "query_text": "flavor flav clock"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500650490191813"
          },
          {
            "timestamp_usec": "1500650559521784"
          }
        ],
        "query_text": "dude with big clock"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500593919372879"
          }
        ],
        "query_text": "(Current Location) -> The Institute Of Contemporary Art, 25 Harbor Shore Drive, Boston, MA 02210"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500593914174052"
          }
        ],
        "query_text": "(Current Location) -> ica"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500592445989719"
          }
        ],
        "query_text": "how to change your sim card without paperclip"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500592325029550"
          }
        ],
        "query_text": "how to change your sim card"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500592271413843"
          }
        ],
        "query_text": "boston aquarium"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500592237050733"
          },
          {
            "timestamp_usec": "1500592239994846"
          }
        ],
        "query_text": "boston waterfront music dancing"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500592168155999"
          }
        ],
        "query_text": "ica july 20th free"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500550303579649"
          },
          {
            "timestamp_usec": "1500550307400850"
          }
        ],
        "query_text": "(Current Location) -> Custom House Block, 66 Long Wharf, Boston, MA 02110"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500526742077232"
          },
          {
            "timestamp_usec": "1500526748284536"
          }
        ],
        "query_text": "(Current Location) -> 66 Long Wharf, Boston, MA 02110"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500506910246974"
          }
        ],
        "query_text": "what is smt programming"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500506897172147"
          }
        ],
        "query_text": "what is smtlib2"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500505509664093"
          },
          {
            "timestamp_usec": "1500506517143689"
          }
        ],
        "query_text": "hacker news"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500505064508400"
          },
          {
            "timestamp_usec": "1500505071118740"
          }
        ],
        "query_text": "shell tips"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500503586082442"
          },
          {
            "timestamp_usec": "1500503589925687"
          },
          {
            "timestamp_usec": "1500505055134030"
          }
        ],
        "query_text": "(Current Location) -> Tisch Library, 35 Professors Row, Medford, MA 02155"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500503584631537"
          }
        ],
        "query_text": "35 Professors Row, Medford, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500498394944282"
          }
        ],
        "query_text": "what does cat stand for bash"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500498390483754"
          }
        ],
        "query_text": "what does cat stand for"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500494589247058"
          }
        ],
        "query_text": "string compare python"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500494560394649"
          }
        ],
        "query_text": "cur.fetchall()"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500494494269625"
          }
        ],
        "query_text": "psycopg2 python tutorial"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500493805153767"
          }
        ],
        "query_text": "python print newline"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500492608642027"
          }
        ],
        "query_text": "print data in table format python"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500491874881195"
          }
        ],
        "query_text": "urban dictionary feeling myself"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500491667064095"
          }
        ],
        "query_text": "macintosh plus floral shoppe"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500491389825672"
          }
        ],
        "query_text": "evan new schmidt website"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500490954225695"
          }
        ],
        "query_text": "the writer automaton"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500490924621734"
          }
        ],
        "query_text": "swan fish"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500490872617091"
          }
        ],
        "query_text": "automaton silver swan"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500488964103503"
          }
        ],
        "query_text": "Hitmonlee"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500488931921816"
          }
        ],
        "query_text": "Kangaskhan"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500488889794239"
          }
        ],
        "query_text": "cubone"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500488881314873"
          }
        ],
        "query_text": "marowak"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500487339715065"
          }
        ],
        "query_text": "tufts roof west coast swing"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500487324788530"
          }
        ],
        "query_text": "tufts roof west coast swing university swing"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500487067448368"
          }
        ],
        "query_text": "execute cannot be used while an asynchronous query is underway********** Error **********"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500486805620018"
          }
        ],
        "query_text": "virtualbox gui"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500486775958193"
          }
        ],
        "query_text": "cheeky sheep wood shop"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500484216778241"
          }
        ],
        "query_text": "jacob collier hideaway"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500479691879432"
          }
        ],
        "query_text": "postgres today's date"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500479517581534"
          }
        ],
        "query_text": "get min of table"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500479472462687"
          }
        ],
        "query_text": "postgres date type"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500479110958374"
          }
        ],
        "query_text": "postgres comment"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500479081449968"
          }
        ],
        "query_text": "postgres find oldest date in a table"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500479039376648"
          }
        ],
        "query_text": "generate series from date range"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478991031806"
          }
        ],
        "query_text": "performance of date range vs generate series"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478928854543"
          }
        ],
        "query_text": "sql modify date range"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478910133720"
          }
        ],
        "query_text": "what does selecting date range do"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478831626972"
          }
        ],
        "query_text": "postgres generate series"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478772040627"
          }
        ],
        "query_text": "where clause on ranges"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478745891100"
          }
        ],
        "query_text": "postgres daterange"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478741301831"
          }
        ],
        "query_text": "postgres generate series"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478706960505"
          }
        ],
        "query_text": "generate series with infinite date range"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478626308102"
          }
        ],
        "query_text": "construct table from date range"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478601707091"
          }
        ],
        "query_text": "date range tutorial sql"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478597638484"
          }
        ],
        "query_text": "date range tutorial"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478534263554"
          }
        ],
        "query_text": "filter an infinite date range"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478481988161"
          }
        ],
        "query_text": "postgres infinite date range"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478358586755"
          }
        ],
        "query_text": "postgres day ranges"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500478036425985"
          }
        ],
        "query_text": "postgres lazily evaluated date range"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500476108872078"
          }
        ],
        "query_text": "2016 calendar"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500476098153552"
          }
        ],
        "query_text": "Davis Square, Somerville, MA -> 56 Pond Ln, Arlington, MA 02474 -> Tulip, Somerville, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500472654759365"
          }
        ],
        "query_text": "hacker news"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500471771528770"
          }
        ],
        "query_text": "using raspberry pi to control window ac"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500471142547255"
          }
        ],
        "query_text": "michael kim wc swing"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500470240234538"
          }
        ],
        "query_text": "west coast swing dance moves dictionary"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500470158269651"
          }
        ],
        "query_text": "west coast swing dance dictionary"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500469209668082"
          }
        ],
        "query_text": "basket whip variations"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500436359477755"
          }
        ],
        "query_text": "west coast swing basket tuck"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500414655560306"
          }
        ],
        "query_text": "Davis Square, Somerville, MA -> 56 Pond Ln, Arlington, MA 02474 -> Tulip, Somerville, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500414645839466"
          }
        ],
        "query_text": "Davis Square, Somerville, MA -> 56 Pond Ln, Arlington, MA 02474"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500414598102439"
          }
        ],
        "query_text": "Tulip, Somerville, MA -> Davis Square, Somerville, MA -> 56 Pond Lane, Arlington, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500414550958504"
          }
        ],
        "query_text": "swing dance lexington west coast"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500414527440591"
          },
          {
            "timestamp_usec": "1500414528297970"
          }
        ],
        "query_text": "Tulip, Somerville, MA -> Davis Square, Somerville, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500414521142668"
          }
        ],
        "query_text": "Davis Square, Somerville, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500414513217932"
          }
        ],
        "query_text": "google maps"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500413008343397"
          }
        ],
        "query_text": "mycodeschool binary search tree"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500412389689369"
          }
        ],
        "query_text": "iteration in sql"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500410656343737"
          }
        ],
        "query_text": "timeit global name is not defined"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500409918576669"
          }
        ],
        "query_text": "python timeit to time function calls"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500409731123589"
          }
        ],
        "query_text": "python 2 timeit"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500409667385346"
          }
        ],
        "query_text": "python timing util"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500409660013859"
          }
        ],
        "query_text": "python get system time"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500409643833856"
          }
        ],
        "query_text": "what is postgres cursor"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500409075386169"
          }
        ],
        "query_text": "python 2 multiline string"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500408187417416"
          }
        ],
        "query_text": "how to make a virtualenv"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500406810151201"
          }
        ],
        "query_text": "python 2 exception syntax"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500406717402700"
          }
        ],
        "query_text": "ssh bash terminal doesn't display colors"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500406128812570"
          }
        ],
        "query_text": "dance boston lexington west coast swing"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500405911965053"
          }
        ],
        "query_text": "how to make a virtualenv"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500405846833208"
          }
        ],
        "query_text": "mkvirtualenv python 2"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500405547703213"
          }
        ],
        "query_text": "psycopg2 python 3"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500405480935824"
          }
        ],
        "query_text": "postgres python"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500404811326454"
          }
        ],
        "query_text": "ssh bash terminal doesn't display colors"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500404582199059"
          }
        ],
        "query_text": "snipping tool ubuntu"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500404412849790"
          }
        ],
        "query_text": "set environment variable in bash script"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500404244713622"
          }
        ],
        "query_text": "PGPASSWORD environment variable"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500404238705900"
          }
        ],
        "query_text": "PGPASS environment variable"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500404227460044"
          }
        ],
        "query_text": "PG_PASS"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500403810090411"
          }
        ],
        "query_text": "postgres how to change passwords"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500401249522203"
          }
        ],
        "query_text": "2017 calendar"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500401011957329"
          }
        ],
        "query_text": "2016 calendar"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500400634027097"
          }
        ],
        "query_text": "september 2016 calendar"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500397717451935"
          }
        ],
        "query_text": "youtube pavement  full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500397711670671"
          }
        ],
        "query_text": "youtube wowee zowee full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500397706189657"
          }
        ],
        "query_text": "youtube wowee zowee"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500394902066433"
          }
        ],
        "query_text": "2016 october calendar"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500394722279444"
          }
        ],
        "query_text": "date range in postgresql"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500394549219869"
          }
        ],
        "query_text": "date in postgresql"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500393697267224"
          }
        ],
        "query_text": "2016 october calendar"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500393601522074"
          }
        ],
        "query_text": "2016 september calendar"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500388222681167"
          }
        ],
        "query_text": "stripe apply"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500387818076205"
          }
        ],
        "query_text": "hn"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500349026093186"
          }
        ],
        "query_text": "pavement interview"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500348816875587"
          },
          {
            "timestamp_usec": "1500348824499648"
          },
          {
            "timestamp_usec": "1500348830781951"
          },
          {
            "timestamp_usec": "1500348843232452"
          },
          {
            "timestamp_usec": "1500349016317328"
          }
        ],
        "query_text": "pavement"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500342401822457"
          }
        ],
        "query_text": "hn"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500340547312417"
          }
        ],
        "query_text": "youtube binary search tree"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500328495947986"
          }
        ],
        "query_text": "humblefool"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500328386524247"
          }
        ],
        "query_text": "youtube binary search tree"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500325740987140"
          }
        ],
        "query_text": "what is select count 0"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500323925163897"
          }
        ],
        "query_text": "calculating holidays sql"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500323919196747"
          }
        ],
        "query_text": "calculating dates sql"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500322184450128"
          }
        ],
        "query_text": "jest duplicate manual mock found index.js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500321995045394"
          }
        ],
        "query_text": "jest 16 module name mapper"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500321975919737"
          }
        ],
        "query_text": "jest modulenamemapper"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500321779166260"
          }
        ],
        "query_text": "jest mocking index.js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500321702543434"
          }
        ],
        "query_text": "jest eslint rules mock must be same name as directory"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500321584974145"
          }
        ],
        "query_text": "eslint rules concerning index.js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500321547569116"
          }
        ],
        "query_text": "how to create an eslint rule"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500321498638159"
          }
        ],
        "query_text": "jest standard for mock names"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500320253358832"
          }
        ],
        "query_text": "form 2 my print comes out sticky"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500319719390185"
          }
        ],
        "query_text": "form 2 finishing print tips"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500319179269539"
          }
        ],
        "query_text": "formlabs what happens if you print without supports"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500317821504088"
          }
        ],
        "query_text": "what does a return block with nothing after it return js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500317767304696"
          }
        ],
        "query_text": "is returning nothing same as returning null js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500316382098881"
          }
        ],
        "query_text": "mdn splice"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500316111279606"
          }
        ],
        "query_text": "splice negative index"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500316099379773"
          }
        ],
        "query_text": "splice at -1 inserts into second to last item js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500315715804495"
          }
        ],
        "query_text": "use splice to insert at end of array js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500315511897272"
          }
        ],
        "query_text": "array insert"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500315494570067"
          }
        ],
        "query_text": "splice to insert on end of array js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500315159818642"
          }
        ],
        "query_text": "git revert a file to master"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500314958384190"
          }
        ],
        "query_text": "array splice"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500305095300485"
          },
          {
            "timestamp_usec": "1500305102865277"
          }
        ],
        "query_text": "(Current Location) -> Tulip, Somerville, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500294827050063"
          }
        ],
        "query_text": "(Current Location) -> Kresge Auditorium, W16, 48 Massachusetts Ave, Cambridge, MA 02139"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500294824457795"
          }
        ],
        "query_text": "Kresge Auditorium, W16, 48 Massachusetts Ave, Cambridge, MA 02139"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500294808232829"
          }
        ],
        "query_text": "TechCrunch robotics"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500292911336151"
          }
        ],
        "query_text": "hn"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500272381058495"
          }
        ],
        "query_text": "faec"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500272363813375"
          }
        ],
        "query_text": "form 2 how many prints can you get per cartridge of resin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500272345270082"
          }
        ],
        "query_text": "form 2 how many prints can you get per cartridge"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500267620904145"
          },
          {
            "timestamp_usec": "1500267625698625"
          }
        ],
        "query_text": "writing a balanced tree"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500267353851617"
          }
        ],
        "query_text": "Moderna"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500266670736782"
          }
        ],
        "query_text": "where are unicorn startups located?"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500266663937878"
          }
        ],
        "query_text": "where is uber's offices located"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500266555885904"
          }
        ],
        "query_text": "google sheets filter by value"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500266489800914"
          }
        ],
        "query_text": "paste formatted into google sheets"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500266436473068"
          }
        ],
        "query_text": "google sheets"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500266368387626"
          }
        ],
        "query_text": "list of unicorns in usa"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500266363377645"
          }
        ],
        "query_text": "list of unicorns"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500266020732829"
          }
        ],
        "query_text": "hackers news"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500266009708937"
          }
        ],
        "query_text": "do you learn more in internships or at school?"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500264808913063"
          }
        ],
        "query_text": "google drive"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500264619963038"
          }
        ],
        "query_text": "choosing a creative commons license"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500264546192898"
          }
        ],
        "query_text": "thingiverse how to upload stl"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500264273079310"
          }
        ],
        "query_text": "thingiverse"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500263524255726"
          }
        ],
        "query_text": "free easy windows video editing software"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500263495914837"
          }
        ],
        "query_text": "windows movie maker windows 7"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500263474732434"
          }
        ],
        "query_text": "windows movie maker"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500263384495174"
          }
        ],
        "query_text": "video to gif"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500262672086762"
          }
        ],
        "query_text": "techcrunch robotics schedule"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500261099611900"
          }
        ],
        "query_text": "how to finish your form 2 prints"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500254023421971"
          }
        ],
        "query_text": "hacker news"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500235732785133"
          }
        ],
        "query_text": "form 2 print without supports"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500235592725083"
          }
        ],
        "query_text": "onshape split parts"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500234960173868"
          }
        ],
        "query_text": "onshape mirror feature"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500234834015434"
          }
        ],
        "query_text": "how to exit full screen mode"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500226367734460"
          },
          {
            "timestamp_usec": "1500226371916980"
          }
        ],
        "query_text": "(Current Location) -> 1692 Commonwealth Avenue, Boston, MA 02135"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500226366247306"
          }
        ],
        "query_text": "1692 Commonwealth Ave Boston, MA 02135"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500226074614730"
          }
        ],
        "query_text": "yelp barber shop allston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500226060002742"
          }
        ],
        "query_text": "yelp barber shop near me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225762596108"
          }
        ],
        "query_text": "andre hair salon"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225643191896"
          }
        ],
        "query_text": "undercut disconnected vs connected"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225608594741"
          }
        ],
        "query_text": "yelp hair salon near me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225582933484"
          }
        ],
        "query_text": "hairdressers near me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225571526176"
          }
        ],
        "query_text": "ethnic hairdressers near me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225547631033"
          }
        ],
        "query_text": "Samira Salon Cambridge, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225537487803"
          }
        ],
        "query_text": "Crystal Hair Salon Boston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225532358143"
          }
        ],
        "query_text": "mop Hair Salon Boston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225530701510"
          }
        ],
        "query_text": "hairdressers near me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225520310213"
          }
        ],
        "query_text": "Floyd's 99 Barbershop Boston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225513784273"
          }
        ],
        "query_text": "333 Salon & Barbershop Boston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225510389307"
          }
        ],
        "query_text": "Supercuts Boston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225503072715"
          }
        ],
        "query_text": "Suisse Natural Hair Salon Newton, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225485684466"
          },
          {
            "timestamp_usec": "1500225488624124"
          },
          {
            "timestamp_usec": "1500225496873091"
          }
        ],
        "query_text": "hairdressers near me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225479950020"
          }
        ],
        "query_text": "Hair Cuttery Allston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225438886156"
          }
        ],
        "query_text": "Lee's Hair Story Allston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500225428833748"
          },
          {
            "timestamp_usec": "1500225431351025"
          }
        ],
        "query_text": "hairdressers near me"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500224009127606"
          },
          {
            "timestamp_usec": "1500224012385672"
          },
          {
            "timestamp_usec": "1500224042949209"
          },
          {
            "timestamp_usec": "1500224062692421"
          }
        ],
        "query_text": "undercut"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500223957921192"
          },
          {
            "timestamp_usec": "1500223963109508"
          },
          {
            "timestamp_usec": "1500223990395955"
          }
        ],
        "query_text": "disconnected undercut"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500223705054337"
          },
          {
            "timestamp_usec": "1500223920654211"
          }
        ],
        "query_text": "how to ask for a disconnected undercut"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500222079431024"
          }
        ],
        "query_text": "guys hairstyles hard part"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500222067107029"
          }
        ],
        "query_text": "hairstyles"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500221923449767"
          }
        ],
        "query_text": "how to ask for a good haircut"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500220345214396"
          }
        ],
        "query_text": "west coast accenting the 1"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500218292053729"
          }
        ],
        "query_text": "structuring a redux app"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500218036842528"
          }
        ],
        "query_text": "what is rpc programming"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500217498671497"
          }
        ],
        "query_text": "hacker news"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500182262634802"
          }
        ],
        "query_text": "hackernews"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500163455135606"
          }
        ],
        "query_text": "balera ballroom"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500163393672252"
          },
          {
            "timestamp_usec": "1500163396598595"
          }
        ],
        "query_text": "(Current Location) -> Balera Ballroom Dance Studio, 105 Rumford Ave, Auburndale, MA 02466"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500163392463507"
          }
        ],
        "query_text": "balera ballroom"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500163121442803"
          }
        ],
        "query_text": "balera west coast"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500163104832619"
          },
          {
            "timestamp_usec": "1500163108796147"
          }
        ],
        "query_text": "balera"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500151218976367"
          }
        ],
        "query_text": "hacker news"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500144775749792"
          }
        ],
        "query_text": "form 2 quick start guide"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500144630351091"
          }
        ],
        "query_text": "preform wont let me move in z directions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500144617621372"
          }
        ],
        "query_text": "perform wont let me move in z directions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500144611422772"
          }
        ],
        "query_text": "formlabs wont let me move in z directions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500144180711038"
          }
        ],
        "query_text": "english bolt clearance chart"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500144146289512"
          },
          {
            "timestamp_usec": "1500144173482263"
          }
        ],
        "query_text": "1/4 -20 clearance size"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500144083696857"
          }
        ],
        "query_text": "hollow wall anchor screw size"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500144015324875"
          },
          {
            "timestamp_usec": "1500144024211585"
          }
        ],
        "query_text": "slip joint"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500131420469076"
          }
        ],
        "query_text": "form 2 models may not print properly when placed directly on build platform"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500131010282991"
          }
        ],
        "query_text": "25.4 * 2.34"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500130999623245"
          }
        ],
        "query_text": "in to mm"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500130992187840"
          }
        ],
        "query_text": "mm to in"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500102919824734"
          }
        ],
        "query_text": "25.4 * 2.36"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500102905849165"
          }
        ],
        "query_text": "how many mm per inch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500102838640389"
          }
        ],
        "query_text": "preform mm to in"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500101197280009"
          }
        ],
        "query_text": "wish you were here"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500099046436224"
          }
        ],
        "query_text": "ipad 9.7 dimensions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500098936271813"
          }
        ],
        "query_text": "ipad 10.5 dimensions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500098851251967"
          }
        ],
        "query_text": "ipad 9.7 dimensions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500098791192338"
          }
        ],
        "query_text": "ipad 10.5 dimensions"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500098740608494"
          }
        ],
        "query_text": "form 2 max print size"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500085904607641"
          }
        ],
        "query_text": "formlabs parts still sticky"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500083428231270"
          }
        ],
        "query_text": "onshape how to select axis for a rotation"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500082705189109"
          }
        ],
        "query_text": "formlabs baths"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500080498585045"
          }
        ],
        "query_text": "102 chester st allston ma"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500079929469275"
          }
        ],
        "query_text": "how much is a new iphone 6s"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500079831052160"
          }
        ],
        "query_text": "difference between 6 and 6s"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500079743215134"
          },
          {
            "timestamp_usec": "1500079780218594"
          }
        ],
        "query_text": "apple iphone 6s 64gb ebay"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500079627259313"
          }
        ],
        "query_text": "difference between 6 and 6 plus"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500079518064096"
          }
        ],
        "query_text": "ebay iphone 6 plus 128gb factory unlocked verizon"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500079514746188"
          }
        ],
        "query_text": "ebay iphone 6 plus 128gb factory unlocked android"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500079506741301"
          }
        ],
        "query_text": "ebay iphone 6 plus 128gb unlocked"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500076059765905"
          }
        ],
        "query_text": "how to get onshape education license"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500075986268639"
          }
        ],
        "query_text": "onshape student"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500075883919785"
          }
        ],
        "query_text": "iphone cord spool"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500075875493602"
          }
        ],
        "query_text": "cord spool"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500075341897081"
          }
        ],
        "query_text": "preform settings for faster print times"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500074709184408"
          }
        ],
        "query_text": "formlabs how to take resin tank out"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500074600053323"
          }
        ],
        "query_text": "formlabs help form 1 printer is busy"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500074578687731"
          }
        ],
        "query_text": "form 1 printer is busy"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500074110842845"
          }
        ],
        "query_text": "resin tank none"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500073787355755"
          }
        ],
        "query_text": "formlabs open cartridge vent"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500073647077506"
          }
        ],
        "query_text": "resin tank says non when it is not empty formlabs"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500073553000817"
          }
        ],
        "query_text": "do I need to change the resin tank for each new print form"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500073253901387"
          }
        ],
        "query_text": "formlabs first print video"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500073144899840"
          }
        ],
        "query_text": "form 2 quick start guide"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500072955960145"
          }
        ],
        "query_text": "formlabs should I always use supports?"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500072085875638"
          }
        ],
        "query_text": "onshape text tool"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500071983879317"
          }
        ],
        "query_text": "pre form"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500071569393019"
          }
        ],
        "query_text": "preform for ubuntu"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500071397937091"
          }
        ],
        "query_text": "form two 3d print print from ubuntu"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500071390857815"
          }
        ],
        "query_text": "form to print from ubuntu"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500070901229682"
          }
        ],
        "query_text": "form two taking prints off of build plate"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500070768039844"
          }
        ],
        "query_text": "formlabs 3 quick start guide"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500070753904758"
          },
          {
            "timestamp_usec": "1500070755638142"
          }
        ],
        "query_text": "formlabs quick start guide"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500070250623774"
          }
        ],
        "query_text": "first print from form 3"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500064891851382"
          }
        ],
        "query_text": "git diff file against master"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500060863115165"
          }
        ],
        "query_text": "jest unmock module"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500060855967601"
          }
        ],
        "query_text": "jest unmock entire module"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500060817152448"
          }
        ],
        "query_text": "jest unmock folder"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500060814834349"
          }
        ],
        "query_text": "jest unmock"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500060742328562"
          }
        ],
        "query_text": "jest unmock entire folder"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500058194609062"
          }
        ],
        "query_text": "when is memorial day 2017"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500058192337063"
          }
        ],
        "query_text": "when is memorial day 201"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500058062446121"
          }
        ],
        "query_text": "when is thanksgiving 2017"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500054987894881"
          }
        ],
        "query_text": "postgresql eomonth"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500054958888942"
          }
        ],
        "query_text": "sql get days of month"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500051437277292"
          }
        ],
        "query_text": "1password google chrome"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500051431273213"
          }
        ],
        "query_text": "1password"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500051366704686"
          }
        ],
        "query_text": "how to use 1password on linux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500051324417020"
          }
        ],
        "query_text": "1password chrome"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500051269621764"
          }
        ],
        "query_text": "google drive"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500050847191391"
          }
        ],
        "query_text": "1password"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500050760579563"
          }
        ],
        "query_text": "enpass isnt saving passwords"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500050152793862"
          }
        ],
        "query_text": "enpass get passwords from all sites chrome"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500050141281803"
          }
        ],
        "query_text": "enpass get passwords from all sites"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500050059925851"
          }
        ],
        "query_text": "how to get started with enpass ubuntu"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500050050011142"
          }
        ],
        "query_text": "how to get started with enpass"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500049635657936"
          }
        ],
        "query_text": "bicycle parts"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500049439435930"
          }
        ],
        "query_text": "enpass with github rsa"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500049433329427"
          }
        ],
        "query_text": "enpass with github"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500049300793161"
          }
        ],
        "query_text": "enpass chrome extension"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500049232462488"
          }
        ],
        "query_text": "enpass"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500049107147979"
          }
        ],
        "query_text": "onepass vs enpass linux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500049098940174"
          }
        ],
        "query_text": "onepass vs enpass"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500048869141763"
          }
        ],
        "query_text": "102 chester st allston mA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500048800885502"
          }
        ],
        "query_text": "Dell 51 WHr 4-Cell Primary Lithium-Ion Battery reviews"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500048791335063"
          }
        ],
        "query_text": "Dell 51 WHr 4-Cell Primary Lithium-Ion Battery"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500048609520862"
          }
        ],
        "query_text": "what is the biggest battery I can get for dell latitude 5000 series"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500048593515111"
          },
          {
            "timestamp_usec": "1500048597327451"
          }
        ],
        "query_text": "dell latitude 5000 series"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500045819907505"
          }
        ],
        "query_text": "ipod charging cord spool"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500044327899375"
          }
        ],
        "query_text": "1password linux ask hn"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500044276311249"
          }
        ],
        "query_text": "1password for pc password"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500044255438906"
          }
        ],
        "query_text": "1password shell"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500044118204185"
          }
        ],
        "query_text": "1password"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500044013131295"
          }
        ],
        "query_text": "password manager ask hn"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500043986423330"
          },
          {
            "timestamp_usec": "1500043995775233"
          }
        ],
        "query_text": "experiences with one pass ask hn"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500043977746622"
          }
        ],
        "query_text": "experiences with one pass"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500043683985866"
          }
        ],
        "query_text": "latitude battery dell"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500043646871959"
          }
        ],
        "query_text": "dell es5450 battery"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500043638311957"
          }
        ],
        "query_text": "dell es5450 series battery"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500043545605410"
          }
        ],
        "query_text": "dell es 5000 series battery"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500043501118246"
          }
        ],
        "query_text": "dell batteries compatible with es 5450"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500043490474892"
          }
        ],
        "query_text": "dell batteries compatible with es 5250"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500043415356948"
          }
        ],
        "query_text": "primary 3 cell 38 w/hr battery amazon"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500043354406127"
          }
        ],
        "query_text": "primary 3 cell 38 w/hr battery"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500043323831887"
          }
        ],
        "query_text": "mA to W"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500043200761972"
          }
        ],
        "query_text": "upgrade laptop battery"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500043097384393"
          }
        ],
        "query_text": "dell replace battery es5450"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500042999595888"
          }
        ],
        "query_text": "replace battery of dell computer"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500042954068070"
          }
        ],
        "query_text": "dell latitude es5450 battery"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500042829748926"
          }
        ],
        "query_text": "dell latitude es5450 sze"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500042751619599"
          }
        ],
        "query_text": "latitude es5450"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500042719770458"
          }
        ],
        "query_text": "latitude es5450 computer sleeve"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500042684713563"
          }
        ],
        "query_text": "procase 9.7"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500042399992567"
          }
        ],
        "query_text": "ipad best zipper carrying case sleeve"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500042279177580"
          }
        ],
        "query_text": "what size iPad do I have a1822"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500042198083835"
          }
        ],
        "query_text": "what size iPad do I have"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500042170285285"
          }
        ],
        "query_text": "ipad best zipper carrying case"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500042054389010"
          }
        ],
        "query_text": "Best iPad case"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500041850794084"
          }
        ],
        "query_text": "nondestructively attach things to bathroom wall"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500041768716442"
          },
          {
            "timestamp_usec": "1500041805244784"
          }
        ],
        "query_text": "ipad holder leather"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500041759701401"
          }
        ],
        "query_text": "ipad holder"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500041634588741"
          }
        ],
        "query_text": "bathroom ipad holder"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500039053417192"
          }
        ],
        "query_text": "hacker news"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500002734487813"
          }
        ],
        "query_text": "thick plush oriental rug"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500001359795141"
          }
        ],
        "query_text": "plush oriental rug"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500001170847647"
          }
        ],
        "query_text": "102 chester st allston ma zip code"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1500000183604028"
          }
        ],
        "query_text": "boston craigslist"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499999403588058"
          }
        ],
        "query_text": "olin students site"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499989784447385"
          }
        ],
        "query_text": "gnome take photo"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499989529469638"
          },
          {
            "timestamp_usec": "1499989536646103"
          }
        ],
        "query_text": "haters gonna hate"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499986276955230"
          },
          {
            "timestamp_usec": "1499986280711012"
          }
        ],
        "query_text": "Tulip, Somerville, MA -> 102 Chester St, Allston, MA 02134"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499986271094745"
          }
        ],
        "query_text": "102 Chester Street, Boston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499986260824158"
          }
        ],
        "query_text": "google maps"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499985417839658"
          }
        ],
        "query_text": "when is columbus day 2017"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499985330393401"
          }
        ],
        "query_text": "when is labor day 2017"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499984393100681"
          }
        ],
        "query_text": "summer hummer"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499984371388646"
          }
        ],
        "query_text": "youtube west coast swing online"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499984182991641"
          }
        ],
        "query_text": "west coast swing online intro to closed position"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499983897834530"
          },
          {
            "timestamp_usec": "1499984016048445"
          }
        ],
        "query_text": "west coast swing online"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499983624975999"
          }
        ],
        "query_text": "west coast swing dance triplet -triple step"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499983613652622"
          }
        ],
        "query_text": "swing dance triplet -triple step"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499983594655012"
          }
        ],
        "query_text": "swing dance triplet"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499981615494170"
          }
        ],
        "query_text": "when is thanksgiving 2017"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499981402933525"
          },
          {
            "timestamp_usec": "1499981430279470"
          }
        ],
        "query_text": "postgres between"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499979113716081"
          }
        ],
        "query_text": "rule for calculating memorial day"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499978457732126"
          }
        ],
        "query_text": "gmail;"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499978320589356"
          }
        ],
        "query_text": "webster how to deactivate bank account"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499978258262914"
          }
        ],
        "query_text": "webster online delete account"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499978201845793"
          }
        ],
        "query_text": "webster bank somerville"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499978196509752"
          }
        ],
        "query_text": "Webster Bank Cambridge, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499978190785449"
          }
        ],
        "query_text": "webster bank somerville"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499978182920849"
          }
        ],
        "query_text": "Webster Bank Cambridge, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499978149041024"
          },
          {
            "timestamp_usec": "1499978153487169"
          },
          {
            "timestamp_usec": "1499978157674635"
          },
          {
            "timestamp_usec": "1499978158443972"
          },
          {
            "timestamp_usec": "1499978159142577"
          },
          {
            "timestamp_usec": "1499978159986963"
          },
          {
            "timestamp_usec": "1499978174751893"
          },
          {
            "timestamp_usec": "1499978176849057"
          },
          {
            "timestamp_usec": "1499978177885980"
          },
          {
            "timestamp_usec": "1499978179323008"
          }
        ],
        "query_text": "webster bank cambridge"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499977830260972"
          }
        ],
        "query_text": "git stash untracked file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499977719517802"
          }
        ],
        "query_text": "javascript test if array is flat"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499977711359307"
          }
        ],
        "query_text": "javascript test if array is nested"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499977018757639"
          }
        ],
        "query_text": "error: COALESCE types text and boolean cannot be matched"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499977005400610"
          }
        ],
        "query_text": "sql interpreting null as string"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499976898985286"
          }
        ],
        "query_text": "sql interprets null as string"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499974968542880"
          }
        ],
        "query_text": "pgadmin4"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499974913253194"
          }
        ],
        "query_text": "run sql statements in browser"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499974382747744"
          }
        ],
        "query_text": "js join two lists"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499970540094907"
          }
        ],
        "query_text": "sql find out if date is holiday"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499970523871925"
          }
        ],
        "query_text": "sql query to find out what week in month you're in"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499969534043708"
          }
        ],
        "query_text": "js is empty array falsey"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499969531059352"
          }
        ],
        "query_text": "js is empty array falsy"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499965495784773"
          }
        ],
        "query_text": "turn array of strings into comma separated string javascript"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499963519560846"
          }
        ],
        "query_text": "postgresql boolean operations with null"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499963392730468"
          }
        ],
        "query_text": "boolean operations with null sql"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499963147371842"
          }
        ],
        "query_text": "postgresql coalesce"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499963105057034"
          }
        ],
        "query_text": "if then sql"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499962407425048"
          }
        ],
        "query_text": "postgresql null boolean"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499958823644259"
          }
        ],
        "query_text": "(Current Location) -> Tulip, 561 Windsor St., B402, Somerville, MA 02143"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499958818656918"
          }
        ],
        "query_text": "(Current Location) -> Tulip, 561 Windsor St., B402, Somerville, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499958818181131"
          }
        ],
        "query_text": "Tulip, 561 Windsor St., B402, Somerville, MA 02143"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499957791535566"
          }
        ],
        "query_text": "crowd sourced code review"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499956278264589"
          }
        ],
        "query_text": "how to deploy separate frontend backend servers"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499955774192007"
          }
        ],
        "query_text": "should front and back and be separate servers"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499955753061969"
          }
        ],
        "query_text": "should front and back and be separate"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499955031689048"
          }
        ],
        "query_text": "what is url conf"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499954253812318"
          }
        ],
        "query_text": "express vs django"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499953831693451"
          }
        ],
        "query_text": "how does react router work with backend"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499953517331247"
          }
        ],
        "query_text": "how auth works in django"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499952596347060"
          }
        ],
        "query_text": "DRM what is EME"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499952323968885"
          }
        ],
        "query_text": "download html of a website"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499951008907205"
          }
        ],
        "query_text": "hacker news"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499949695339442"
          },
          {
            "timestamp_usec": "1499949856812403"
          }
        ],
        "query_text": "West coast swing cross hands"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499924628883614"
          }
        ],
        "query_text": "west coast swing change hands tutorial"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499920650169607"
          },
          {
            "timestamp_usec": "1499920655319514"
          }
        ],
        "query_text": "west coast swing online"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499920635083175"
          }
        ],
        "query_text": "what is orm"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499918375211841"
          }
        ],
        "query_text": "(Current Location) -> The Cambridge Masonic Hall, Cambridge Masonic Hall, 1950 Massachusetts Ave, Cambridge, MA 02140"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499903369097875"
          },
          {
            "timestamp_usec": "1499903369102349"
          },
          {
            "timestamp_usec": "1499903369103781"
          },
          {
            "timestamp_usec": "1499903797477432"
          }
        ],
        "query_text": "(Current Location) -> The Cambridge Masonic Hall, Cambridge Masonic Hall, 1950 Massachusetts Ave, Cambridge, MA 02140"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499902370207922"
          }
        ],
        "query_text": "(Current Location) -> The Cambridge Masonic Hall, Cambridge Masonic Hall, Massachusetts Avenue, Cambridge, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499902369642392"
          }
        ],
        "query_text": "The Cambridge Masonic Hall, Cambridge Masonic Hall, 1950 Massachusetts Ave, Cambridge, MA 02140"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499900768438537"
          }
        ],
        "query_text": "(Current Location) -> The Cambridge Masonic Hall, Cambridge Masonic Hall, 1950 Massachusetts Ave, Cambridge, MA 02140"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499900766510315"
          }
        ],
        "query_text": "The Cambridge Masonic Hall, Cambridge Masonic Hall, 1950 Massachusetts Ave, Cambridge, MA 02140"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499899411363029"
          }
        ],
        "query_text": "hacker news"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499899173175991"
          }
        ],
        "query_text": "react what admin do you use"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499899128312378"
          }
        ],
        "query_text": "is adminlte free"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499898988753399"
          }
        ],
        "query_text": "window.django"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499898975489002"
          }
        ],
        "query_text": "what is csrf"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499898775692144"
          }
        ],
        "query_text": "how to use adminlte"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499898747331468"
          }
        ],
        "query_text": "adminlte"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499898166121739"
          }
        ],
        "query_text": "react admin lte"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499896280685177"
          }
        ],
        "query_text": "reselect react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499896136796878"
          }
        ],
        "query_text": "scott woodall react tutorial"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499896130629457"
          }
        ],
        "query_text": "scott woodall"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499895387628117"
          }
        ],
        "query_text": "what is adminlte"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499893992948952"
          }
        ],
        "query_text": "createdb: could not connect to database template1: FATAL: role does not exist"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499893987508428"
          }
        ],
        "query_text": "createdb: could not connect to database template1: FATAL: role \"jspear\" does not exist"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499893926257089"
          }
        ],
        "query_text": "postgres createdb"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499893742329610"
          }
        ],
        "query_text": "pip see latest version"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499893695606140"
          }
        ],
        "query_text": "django filter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499893652806536"
          }
        ],
        "query_text": "django-autofixture"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499893604782988"
          }
        ],
        "query_text": "pip flake8"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499892149210571"
          }
        ],
        "query_text": "django and react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499891986149250"
          }
        ],
        "query_text": "using django as backend for a react app"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499891270446188"
          }
        ],
        "query_text": "how to use postman to test api"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499891108793671"
          }
        ],
        "query_text": "postman"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499891086464311"
          }
        ],
        "query_text": "how to make a post specifying username and password"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499891053212057"
          }
        ],
        "query_text": "how to send a post request from the command line"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499890892555786"
          }
        ],
        "query_text": "django views generic"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499890314972520"
          }
        ],
        "query_text": "django generic views"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499890194138570"
          }
        ],
        "query_text": "thedancingfools"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499889909817984"
          }
        ],
        "query_text": "django api UserView"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499889862969122"
          }
        ],
        "query_text": "django UserView"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499889803065177"
          }
        ],
        "query_text": "st3 disable autocomplete on enter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499888705135388"
          }
        ],
        "query_text": "reverse not working django"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499888304330967"
          },
          {
            "timestamp_usec": "1499888321771457"
          }
        ],
        "query_text": "TypeError: _reverse_with_prefix() argument after ** must be a mapping, not set"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499887957337184"
          }
        ],
        "query_text": "403 vs 401"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499887853526470"
          }
        ],
        "query_text": "_reverse_with_prefix() argument after ** must be a mapping, not se"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499885665665335"
          }
        ],
        "query_text": "sublime move line up"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499884934283256"
          }
        ],
        "query_text": "what is drf app django"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499884929713262"
          }
        ],
        "query_text": "what is drf app"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499884925237344"
          }
        ],
        "query_text": "what is drf"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499884794934645"
          }
        ],
        "query_text": "should i put db.sqlite in gitignore"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499884765246033"
          }
        ],
        "query_text": "should i put database in gitignore"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499884377194432"
          }
        ],
        "query_text": "django assert is none"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499882949397597"
          }
        ],
        "query_text": "what is reverse django"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499882927810779"
          }
        ],
        "query_text": "django rest_framework post"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499882917833582"
          }
        ],
        "query_text": "django client.post"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499882907153317"
          }
        ],
        "query_text": "django apiclient.post"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499882164344755"
          }
        ],
        "query_text": "models.CharField"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499881146092427"
          }
        ],
        "query_text": "new virtual environment has too many packages"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499880846547031"
          }
        ],
        "query_text": "separating client and server code in monorepo"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499880747001564"
          }
        ],
        "query_text": "git revert"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499880593744080"
          }
        ],
        "query_text": "using django as an api"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499876529519904"
          }
        ],
        "query_text": "javascript list of numbers to comma separated surrounded by parentheses"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499874589984387"
          }
        ],
        "query_text": "sql value in list"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499874111130632"
          }
        ],
        "query_text": "postgres create a strong"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499873780820051"
          },
          {
            "timestamp_usec": "1499873780821405"
          }
        ],
        "query_text": "(Current Location) -> Tulip, 561 Windsor St., B402, Somerville, MA 02143"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499872830214021"
          }
        ],
        "query_text": "array_agg"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499872662740236"
          }
        ],
        "query_text": "sqlite3 subselect"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499872610510687"
          }
        ],
        "query_text": "sqlite3 select"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499872428202106"
          }
        ],
        "query_text": "sql make selection into new table"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499870693173921"
          }
        ],
        "query_text": "displays reset configuration 14.04 -nvidia"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499870675759448"
          }
        ],
        "query_text": "displays dont save configuration on restart gnome 14.04 -nvidia"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499870667873756"
          }
        ],
        "query_text": "displays dont save configuration on restart ubuntu -nvidia"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499870652048883"
          }
        ],
        "query_text": "displays dont save configuration on restart ubuntu"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499869203468116"
          }
        ],
        "query_text": "(Current Location) -> Tulip, 561 Windsor St., B402, Somerville, MA 02143"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499869098731545"
          }
        ],
        "query_text": "(Current Location) -> Tulip, 561 Windsor St., B402, Somerville, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499869098485241"
          }
        ],
        "query_text": "Tulip, 561 Windsor St., B402, Somerville, MA 02143"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499865396473295"
          }
        ],
        "query_text": "use django as rest server"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499865339735655"
          }
        ],
        "query_text": "use django without templates"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499865067798115"
          }
        ],
        "query_text": "using django with react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499865043054513"
          }
        ],
        "query_text": "client server patterns"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499864984843851"
          }
        ],
        "query_text": "should client and server have same address"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499864734865427"
          }
        ],
        "query_text": "what is orm"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499864500655984"
          }
        ],
        "query_text": "what is uwsgi config"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499864470069804"
          }
        ],
        "query_text": "uwsgi config"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499863509540912"
          }
        ],
        "query_text": "what is rdbms"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499863470673712"
          }
        ],
        "query_text": "hacker News Django vs flask"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499863450318259"
          }
        ],
        "query_text": "where the app deployment patterns"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499862397067026"
          }
        ],
        "query_text": "sonar vs phab"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499862133956329"
          }
        ],
        "query_text": "code commit sonar test"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499862112528418"
          }
        ],
        "query_text": "commit code ATs"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499861652948751"
          }
        ],
        "query_text": "web app deployment patterns YouTube"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499861472867957"
          }
        ],
        "query_text": "where the app deployment patterns"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499826104683542"
          }
        ],
        "query_text": "browser use by demographic"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499820141208119"
          }
        ],
        "query_text": "calling PropTypes validators directly is not supported by the `prop-types` package"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499819907979265"
          }
        ],
        "query_text": "what is eslintcache"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499819109497808"
          }
        ],
        "query_text": "eslint unexpected require"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499818994345995"
          }
        ],
        "query_text": "git stash one file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499818101900192"
          }
        ],
        "query_text": "jsx props should not use .bind()"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499817925330285"
          }
        ],
        "query_text": "alternative to using react keys"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499817800893926"
          }
        ],
        "query_text": "do not use array in index"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499817600938884"
          }
        ],
        "query_text": "disable require prop types validation"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499817556008934"
          }
        ],
        "query_text": "params is missing in props validation"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499816909375962"
          }
        ],
        "query_text": "prop types"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499816804289764"
          }
        ],
        "query_text": "do i need react as a dev dependency"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499816641453655"
          }
        ],
        "query_text": "prop types package"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499816596732317"
          }
        ],
        "query_text": "turn of all linting for a file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499816501390986"
          }
        ],
        "query_text": "eslint -fix"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499816499522706"
          }
        ],
        "query_text": "eslint -fi"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499816176987323"
          }
        ],
        "query_text": "changing switchcase indentation doesn't change"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499815958999267"
          }
        ],
        "query_text": "eslint expected extra indentation for case"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499815824748907"
          }
        ],
        "query_text": "unexpected lexical declaration in case block"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499815461674877"
          }
        ],
        "query_text": "webpack not finding jsx files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499815455116626"
          }
        ],
        "query_text": "babel loader not finding jsx files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499815446293898"
          }
        ],
        "query_text": "babel loader not working with jsx files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499815423271267"
          }
        ],
        "query_text": "jsx not allowed in files with extension '.js'"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499815037890437"
          }
        ],
        "query_text": "webpack regex for js or jsx"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499814999788265"
          }
        ],
        "query_text": "regex what does dollar sign mean"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499814878557361"
          }
        ],
        "query_text": "why call jsx files jsx"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499814688199187"
          }
        ],
        "query_text": "window is not defined eslint"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499814419712098"
          }
        ],
        "query_text": "eslint ignore console.log"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499814148621317"
          }
        ],
        "query_text": "run eslint before commit"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499814145025209"
          }
        ],
        "query_text": "run eslint before git push"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499813934273394"
          }
        ],
        "query_text": "eslintrc indent"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499813676270345"
          }
        ],
        "query_text": "babel loader not working with react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499813528197358"
          }
        ],
        "query_text": "adding react loader to webpack"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499813206225809"
          }
        ],
        "query_text": "webpack recognize js as react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499813166368940"
          }
        ],
        "query_text": "using react in pure js files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499813106564497"
          }
        ],
        "query_text": "npm __dirname"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499813088088194"
          }
        ],
        "query_text": "npm dirname"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499812943617469"
          }
        ],
        "query_text": "webpack could not resolve file or directory"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499812659498584"
          }
        ],
        "query_text": "wes learn redux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499812227820901"
          }
        ],
        "query_text": "eslintrc file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499812118866717"
          }
        ],
        "query_text": "airbnb eslintrc file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499812073808649"
          }
        ],
        "query_text": "eslint the keyword import is reserved"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499811944049797"
          }
        ],
        "query_text": "sublimelinter paths"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499811690730770"
          }
        ],
        "query_text": "find exclude folder"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499811623999897"
          }
        ],
        "query_text": "npm see global packages"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499811568008836"
          }
        ],
        "query_text": "is the keyword import is reserved"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499811440469815"
          }
        ],
        "query_text": "axios vs fetch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499811394568525"
          }
        ],
        "query_text": "what is axios js"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499811386164014"
          }
        ],
        "query_text": "what is axios"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499806773112104"
          }
        ],
        "query_text": "peanut butter banana protein shake"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499806581012849"
          }
        ],
        "query_text": "what backend do you use with react redux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499806501975117"
          }
        ],
        "query_text": "redux thunk tutorial"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499805700704482"
          }
        ],
        "query_text": "redux-saga vs redux-thunk"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499805581762778"
          }
        ],
        "query_text": "why use normalization redux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499803943422790"
          }
        ],
        "query_text": "using redux to fetch backend data"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499803125605695"
          }
        ],
        "query_text": "how to structure client and server react redux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499803107109334"
          }
        ],
        "query_text": "how to structure a react/redux app"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499803004213611"
          }
        ],
        "query_text": "redux get info from db"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499802953540450"
          }
        ],
        "query_text": "how to send data between client and server using express react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499802943457893"
          }
        ],
        "query_text": "how to send data between client and server using express"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499801959992084"
          }
        ],
        "query_text": "express with react router pattern"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499800777288954"
          }
        ],
        "query_text": "npm get info about current package"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499800771932156"
          }
        ],
        "query_text": "npm get info"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499800723059996"
          }
        ],
        "query_text": "npm info"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499800699797069"
          }
        ],
        "query_text": "npm info won't update -latest"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499800691631190"
          }
        ],
        "query_text": "npm info won't update"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499800660172616"
          },
          {
            "timestamp_usec": "1499800681069696"
          }
        ],
        "query_text": "npm info shows different info than package.json"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499800559729366"
          }
        ],
        "query_text": "npm init using a package.json"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499800542139236"
          }
        ],
        "query_text": "npm init with a package.json"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499800432942578"
          }
        ],
        "query_text": "update npm package.json not changing npm info"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499800421228216"
          }
        ],
        "query_text": "update npm info"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499800254526566"
          }
        ],
        "query_text": "no such file or directory, uv_cwd"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499798912359902"
          }
        ],
        "query_text": "how to set up react-router with server"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499798564502419"
          }
        ],
        "query_text": "difference between express and react router"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499798474732271"
          }
        ],
        "query_text": "what is pug"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499798076840447"
          }
        ],
        "query_text": "github add license"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499797896580030"
          }
        ],
        "query_text": "change https to ssh github"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499797711715635"
          }
        ],
        "query_text": "find folder linux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499797658265785"
          }
        ],
        "query_text": "how to find all files with an extension comman dline"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499797534046554"
          }
        ],
        "query_text": "how to add a github ssh key"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499797416167499"
          }
        ],
        "query_text": "git how to add a personal access token github"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499797410429696"
          }
        ],
        "query_text": "git how to add a personal access token"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499797334274771"
          }
        ],
        "query_text": "remote: Invalid username or password. fatal: Authentication failed for 'https://github.com/Joboman555/Bandmate.git/'"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499796920378159"
          }
        ],
        "query_text": "react gitignore"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499796686009089"
          }
        ],
        "query_text": "how to make an already existing repository into git"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499796369810266"
          }
        ],
        "query_text": "what is express"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499796350975517"
          }
        ],
        "query_text": "express vs webpack"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499794914177261"
          }
        ],
        "query_text": "redux dev tools not working"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499794787938339"
          }
        ],
        "query_text": "how to use redux devtools"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499794765470259"
          }
        ],
        "query_text": "how to use react devtools"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499794674087160"
          }
        ],
        "query_text": "redux dev tools slow"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499792971213693"
          }
        ],
        "query_text": "sentry object object has no method updateFrom"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499792646915948"
          }
        ],
        "query_text": "sentry raven"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499790350784571"
          }
        ],
        "query_text": "cannot read property props of null"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499789377069507"
          }
        ],
        "query_text": "sublime text 3 trim trailing whitespace"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499789359503239"
          }
        ],
        "query_text": "sublime saving dont delete spaces on current line"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499789253926144"
          }
        ],
        "query_text": "react class syntax"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499789019267166"
          }
        ],
        "query_text": "stateless function components cannot have refs"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499786657099745"
          }
        ],
        "query_text": "css transition group"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499786605407070"
          }
        ],
        "query_text": "mdn figcaption"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499786533587801"
          }
        ],
        "query_text": "mdn figure"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499785523457010"
          }
        ],
        "query_text": "what does react.cloneElement do?"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499785272206324"
          }
        ],
        "query_text": "syncHistoryWithStore"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499784559261397"
          }
        ],
        "query_text": "react redux how does provider know which components to send state to"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499784114105598"
          }
        ],
        "query_text": "react router"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499783377696250"
          }
        ],
        "query_text": "what does bind action creators do"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499781193863824"
          }
        ],
        "query_text": "what does provider do react-redux"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499781179469737"
          }
        ],
        "query_text": "what does provider do"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499780382604862"
          }
        ],
        "query_text": "createStore"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499779266773902"
          }
        ],
        "query_text": "react router path"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499775010379356"
          }
        ],
        "query_text": "hacker news"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499744382759903"
          },
          {
            "timestamp_usec": "1499744394128375"
          }
        ],
        "query_text": "untitled unmastered full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499744348326970"
          }
        ],
        "query_text": "untitled unmastered"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499744119444640"
          }
        ],
        "query_text": "untitled unmastered full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499744111050625"
          }
        ],
        "query_text": "untitled unmastered"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499734638354826"
          }
        ],
        "query_text": "emmet tab for js files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499734443584591"
          }
        ],
        "query_text": "react enable emmet for js files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499729869890664"
          }
        ],
        "query_text": "react class syntax"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499729862458760"
          }
        ],
        "query_text": "extending component react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499729812472172"
          }
        ],
        "query_text": "unexpected token export default const"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499728541026263"
          }
        ],
        "query_text": "redux dev tools"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499723632288579"
          }
        ],
        "query_text": "reduxstagram"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499723057832697"
          }
        ],
        "query_text": "Sante Fe"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499720163183460"
          }
        ],
        "query_text": "sql insert null into table"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499720014272900"
          }
        ],
        "query_text": "sqlite datetime"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499718970609415"
          }
        ],
        "query_text": "ubuntu how to use virtual desktops"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499715495222797"
          }
        ],
        "query_text": "office white noise machine"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499713437574021"
          }
        ],
        "query_text": "lodash set"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499713433051166"
          }
        ],
        "query_text": "underscore set"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499713364696884"
          }
        ],
        "query_text": "meteor mongo hooks"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499712319247568"
          }
        ],
        "query_text": "mongo see all collections"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499705838361572"
          }
        ],
        "query_text": "atom find in project exclude multiple"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499705822676278"
          }
        ],
        "query_text": "sublime find in project exclude multiple"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499705812576850"
          }
        ],
        "query_text": "sublime find in project union"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499705807787780"
          }
        ],
        "query_text": "find in project union"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499705731274337"
          }
        ],
        "query_text": "atom find replace exclude files"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499705717978777"
          }
        ],
        "query_text": "atom project search"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499705293874283"
          }
        ],
        "query_text": "python multiline comments"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499699972043789"
          }
        ],
        "query_text": "sql drop table"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499699207244597"
          }
        ],
        "query_text": "sound of silver lcd soundsystem"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499643988183391"
          }
        ],
        "query_text": "(Current Location) -> Boston College, Boston, MA 02467"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499643985036927"
          }
        ],
        "query_text": "Boston College, Boston, MA 02467"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499643682290761"
          }
        ],
        "query_text": "olin webmail"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499490858645748"
          }
        ],
        "query_text": "(Current Location) -> New Haven, CT"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499469920009163"
          },
          {
            "timestamp_usec": "1499469951330403"
          },
          {
            "timestamp_usec": "1499469982748356"
          },
          {
            "timestamp_usec": "1499470017359050"
          },
          {
            "timestamp_usec": "1499470464365778"
          },
          {
            "timestamp_usec": "1499470837442106"
          },
          {
            "timestamp_usec": "1499470839006446"
          },
          {
            "timestamp_usec": "1499471997104481"
          }
        ],
        "query_text": "(Current Location) -> New Haven, CT"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499466681770395"
          },
          {
            "timestamp_usec": "1499466703237692"
          }
        ],
        "query_text": "Cask Republic"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499466613173632"
          },
          {
            "timestamp_usec": "1499466615955089"
          }
        ],
        "query_text": "(Current Location) -> New Haven County, CT"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499466599352954"
          },
          {
            "timestamp_usec": "1499466602803523"
          }
        ],
        "query_text": "new haven"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499456231265593"
          }
        ],
        "query_text": "google domain names"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499456083777401"
          }
        ],
        "query_text": "how to find out who owns a domain"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499455928543579"
          }
        ],
        "query_text": "buy a domain"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499455306169696"
          }
        ],
        "query_text": "sublime text sql syntax highlighting messes up indentation"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499455288020040"
          }
        ],
        "query_text": "sublime text sql syntax plugin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499453836686475"
          }
        ],
        "query_text": "sqlite3 data types"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499453825997666"
          }
        ],
        "query_text": "sqlite3 databases"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499453732021465"
          }
        ],
        "query_text": "sublime stop auto correcting when you've reached full word and there are no other options"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499453591002490"
          }
        ],
        "query_text": "sqlite quit"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499453333963002"
          }
        ],
        "query_text": "sublime tab moves cursor to end of previous line"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499453306847948"
          }
        ],
        "query_text": "sql tab goes forward too much sublime"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499453189636265"
          }
        ],
        "query_text": "add line in braces sublime macro"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499453159267465"
          }
        ],
        "query_text": "add line in braces doesn't indent sublime"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499453153111424"
          }
        ],
        "query_text": "add line in braces doesn't indent"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499452677474603"
          }
        ],
        "query_text": "what does ls - l do"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499452261557607"
          }
        ],
        "query_text": "download sqlite3 ubuntu"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499452049340240"
          }
        ],
        "query_text": "youtube lcd soundsystem full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499451150526221"
          }
        ],
        "query_text": "learn sql the hard way"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499451115398118"
          }
        ],
        "query_text": "ask hn best sql tutorial"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499450307576662"
          }
        ],
        "query_text": "postgres compare row to value"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499450251740196"
          }
        ],
        "query_text": "check if row is equal to a value postgres"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499450165210176"
          }
        ],
        "query_text": "working with variables in postgres"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499449234939649"
          }
        ],
        "query_text": "postgres evaluate expression to boolean"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499448650168919"
          }
        ],
        "query_text": "postgres if then select from table"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499448481254442"
          }
        ],
        "query_text": "postgres if syntax"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499447169381499"
          }
        ],
        "query_text": "postgres row to bool"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499447158142620"
          }
        ],
        "query_text": "postgres test if elements in row are equal to value"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499446708082418"
          }
        ],
        "query_text": "what does select do in postgres"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499446384192668"
          }
        ],
        "query_text": "what does a comma in a postgres string mean"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499446366881863"
          }
        ],
        "query_text": "postgres what to commas do"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499446159226254"
          }
        ],
        "query_text": "postgres unnest"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499446088705182"
          }
        ],
        "query_text": "postgres array_agg"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499445596919439"
          }
        ],
        "query_text": "beginner postgres tutorial"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499445572359966"
          }
        ],
        "query_text": "postgres syntax"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499445159334734"
          }
        ],
        "query_text": "postgres what is date_part"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499443015148636"
          }
        ],
        "query_text": "git revert"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499442334873702"
          }
        ],
        "query_text": "bash execute commands in new terminal"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499442270293187"
          }
        ],
        "query_text": "creating a simple bash script to execute commands"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499442035954414"
          }
        ],
        "query_text": "making an executable in /usr/local/bin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499441948252103"
          }
        ],
        "query_text": "how to create bash commands to run programs"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499441704844357"
          }
        ],
        "query_text": "squel library"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499441329881809"
          }
        ],
        "query_text": "ubuntu install pgadmin4 14.04"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499441312701837"
          }
        ],
        "query_text": "ubuntu install pgadmin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499440008796542"
          }
        ],
        "query_text": "ubuntu save display settings"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499437332471585"
          },
          {
            "timestamp_usec": "1499437334339307"
          }
        ],
        "query_text": "(Current Location) -> Tulip, 561 Windsor St., B402, Somerville, MA 02143"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499437329290091"
          }
        ],
        "query_text": "Tulip, 561 Windsor St., B402, Somerville, MA 02143"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499397914994318"
          }
        ],
        "query_text": "ride wikipedia band"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499397511208367"
          }
        ],
        "query_text": "darlin beach boys lyrics"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499397492092056"
          }
        ],
        "query_text": "sloop john b lyrics"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499397481031082"
          }
        ],
        "query_text": "barbara ann lyrics"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499397456433668"
          }
        ],
        "query_text": "bluebirds over the mountain lyrics"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499397443119492"
          }
        ],
        "query_text": "california girls lyrics"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499397358369726"
          }
        ],
        "query_text": "holidays lyrics beach boys"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499397269731828"
          }
        ],
        "query_text": "the cosmos porches lyrics"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499397252066592"
          }
        ],
        "query_text": "skinny trees porches lyrics"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499397195566197"
          }
        ],
        "query_text": "boy alex g lyrics"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499397069085551"
          }
        ],
        "query_text": "classic driving songs"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499396950419591"
          }
        ],
        "query_text": "brian jonestown massacre lyrics anemone"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499396930907612"
          }
        ],
        "query_text": "the brian jonestown massacre lyrics"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499396575801573"
          }
        ],
        "query_text": "my ex grandma bianca rufus wainwright"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499396532846046"
          }
        ],
        "query_text": "movies of myself lyrics"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499396507227248"
          }
        ],
        "query_text": "i don't know what it is lyrics rufus wainwright"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499396483973250"
          }
        ],
        "query_text": "oh what a world lyrics"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499395893853756"
          }
        ],
        "query_text": "ryan breen bandcamp"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499395887592989"
          }
        ],
        "query_text": "ryan breen"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499395138679319"
          }
        ],
        "query_text": "let the good times roll"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499391910247928"
          }
        ],
        "query_text": "steam the long dark"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499383446690355"
          }
        ],
        "query_text": "captain underpants showtimes boston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499372512612614"
          }
        ],
        "query_text": "booleans in sql"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499371527226412"
          }
        ],
        "query_text": "alex g full album"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499370757095010"
          }
        ],
        "query_text": "how to create a subtask in phabricator"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499370751794573"
          }
        ],
        "query_text": "how to create a subtask in jira"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499369502252090"
          }
        ],
        "query_text": "sublime command to change tab width"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499369098652323"
          }
        ],
        "query_text": "marcus boorstin github"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499368999572578"
          }
        ],
        "query_text": "donald guy github"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499366110037096"
          },
          {
            "timestamp_usec": "1499366112395991"
          }
        ],
        "query_text": "captain underpants showtimes boston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499366100002504"
          },
          {
            "timestamp_usec": "1499366100113703"
          }
        ],
        "query_text": "(Current Location) -> 259 Hartford Ave, Bellingham, MA 02019"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499366089003962"
          }
        ],
        "query_text": "regal bellingham stadium 14"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499366061566481"
          },
          {
            "timestamp_usec": "1499366071389717"
          }
        ],
        "query_text": "captain underpants showtimes boston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499360194641007"
          }
        ],
        "query_text": "get all elements from document"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499360158822839"
          }
        ],
        "query_text": "document select all"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499359881358756"
          }
        ],
        "query_text": "react setting autofocus doesnt work"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499359720718041"
          }
        ],
        "query_text": "scss setting attributes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499359623647618"
          }
        ],
        "query_text": "autofocus unknown property name"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499358733721600"
          }
        ],
        "query_text": "react setting autofocus to true does not change element"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499358543819182"
          }
        ],
        "query_text": "autofocus show up in chrome debugger"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499358408467949"
          }
        ],
        "query_text": "hasattribute autofocus"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499358064194161"
          }
        ],
        "query_text": "array filter is not a function"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499357818545552"
          }
        ],
        "query_text": "autofocus mdn"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499357811309939"
          }
        ],
        "query_text": "autofocus"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499357796545134"
          }
        ],
        "query_text": "js get dom element with a tag"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499357492179808"
          }
        ],
        "query_text": "chrome devtools find which element has auto select"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499357411776271"
          }
        ],
        "query_text": "how do I find which elements on a page have autoselect"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499353510012819"
          }
        ],
        "query_text": "Bad JSFiddle configuration, please fork the original React JSFiddle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499353466134819"
          }
        ],
        "query_text": "react classes jsfiddle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499353431837232"
          }
        ],
        "query_text": "react base jsfiddle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499353388975498"
          }
        ],
        "query_text": "jsfiddle es6"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499353323824424"
          }
        ],
        "query_text": "jsfiddle see errors"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499353192543874"
          }
        ],
        "query_text": "alex g i am not your lover"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499352799763225"
          }
        ],
        "query_text": "react component lifecycle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499352482763669"
          }
        ],
        "query_text": "react focus is not triggering the onFocus event"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499352471033510"
          }
        ],
        "query_text": "focus is not triggering the onFocus event"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499352261262674"
          }
        ],
        "query_text": "set text to be bold during component did mount"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499351769210192"
          }
        ],
        "query_text": "handle focus doesn't trigger on autofocus"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499350733561697"
          }
        ],
        "query_text": "inspect a react component"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499350714175284"
          }
        ],
        "query_text": "finding an element in the react console"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499350369926305"
          }
        ],
        "query_text": "monitor what is dcr"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499349966630968"
          }
        ],
        "query_text": "calibrate two monitors to look the same"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499345476394924"
          }
        ],
        "query_text": "when instep through debugger in chrome tools and set a breakpoint to component did mount the react element has not been rendered on the screen"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499345420219878"
          }
        ],
        "query_text": "react autofocus and autoselect input"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499312075138568"
          }
        ],
        "query_text": "(Current Location) -> 102 Chester St, Allston, MA 02134"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499312064909599"
          }
        ],
        "query_text": "(Current Location) -> The Cambridge Masonic Hall, Cambridge Masonic Hall, 1950 Massachusetts Ave, Cambridge, MA 02140"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499309205192322"
          },
          {
            "timestamp_usec": "1499309205519673"
          }
        ],
        "query_text": "(Current Location) -> The Cambridge Masonic Hall, Cambridge Masonic Hall, 1950 Massachusetts Ave, Cambridge, MA 02140"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499297673000031"
          },
          {
            "timestamp_usec": "1499297697724297"
          },
          {
            "timestamp_usec": "1499298277535310"
          },
          {
            "timestamp_usec": "1499298277563620"
          },
          {
            "timestamp_usec": "1499298278764419"
          },
          {
            "timestamp_usec": "1499298280171552"
          }
        ],
        "query_text": "(Current Location) -> The Cambridge Masonic Hall, Cambridge Masonic Hall, 1950 Massachusetts Ave, Cambridge, MA 02140"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499297644900173"
          }
        ],
        "query_text": "(Current Location) -> Cambridge Masonic Hall 1950 Massachusetts Avenue"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499297640830258"
          }
        ],
        "query_text": "(Current Location) -> 48 Eldred St, Lexington, MA 02420"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499297633138915"
          }
        ],
        "query_text": "Alewife Station, Cambridge, MA 02140 -> 48 Eldred St, Lexington, MA 02420"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499297182451044"
          }
        ],
        "query_text": "debugger view isnt shown on componentDidMount"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499297149729784"
          }
        ],
        "query_text": "react componentdidmount"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499297122407577"
          }
        ],
        "query_text": "dam changes in componentdidmount not showing"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499296979204356"
          }
        ],
        "query_text": "react component lifecycle method called when component is first rendered"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499296335150373"
          }
        ],
        "query_text": "react select all text on autofocus"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499296309011460"
          }
        ],
        "query_text": "react autofocus and select all text"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499295878446378"
          },
          {
            "timestamp_usec": "1499295905589843"
          }
        ],
        "query_text": "using ref in react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499295663401172"
          }
        ],
        "query_text": "react autofocus select text"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499295393919825"
          }
        ],
        "query_text": "react focus input"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499294109529670"
          }
        ],
        "query_text": "this.setstate is not a function"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499293752243249"
          }
        ],
        "query_text": "setState is not a function in componentDidMount"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499293459805237"
          }
        ],
        "query_text": "react lifecycle events"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499293403061552"
          }
        ],
        "query_text": "react focus event"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499293121019931"
          }
        ],
        "query_text": "no onfocus event being fired for autofocus"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499292783006090"
          }
        ],
        "query_text": "react how to select text in an input"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499292756803059"
          }
        ],
        "query_text": "how to select text in an input"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499292709929009"
          }
        ],
        "query_text": "autofocus and select text"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499292673840870"
          }
        ],
        "query_text": "mdn input"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499292634908279"
          }
        ],
        "query_text": "jsfiddle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499292630146668"
          }
        ],
        "query_text": "chrome autofocus behavior"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499292226864783"
          }
        ],
        "query_text": "javascript autofocus"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499291986701765"
          }
        ],
        "query_text": "value must be omitted for boolean attributes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499291443273424"
          }
        ],
        "query_text": "autoselect input"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499291211099105"
          }
        ],
        "query_text": "react event when navigating away from page"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499291190447636"
          }
        ],
        "query_text": "react on delete"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499290788601756"
          }
        ],
        "query_text": "git remove local branch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499290184628187"
          }
        ],
        "query_text": "ubuntu using 2 external monitors can't drag all the way"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499288868263729"
          }
        ],
        "query_text": "jest create a default mock"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499287421832424"
          }
        ],
        "query_text": "import moment from 'moment-timezone'"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499287349610685"
          }
        ],
        "query_text": "moment-timezone"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499287285434798"
          }
        ],
        "query_text": "moment is not a function import moment from moment-timezone"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499287225484737"
          }
        ],
        "query_text": "import moment from 'moment-timezone'"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499286865628152"
          }
        ],
        "query_text": "The module factory of `jest.mock()` is not allowed to reference any out-of-scope variables."
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499286433935849"
          }
        ],
        "query_text": "thedancingfools"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499285854170003"
          }
        ],
        "query_text": "flow not recognizing user defined type file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499285630508999"
          }
        ],
        "query_text": "moment-timezone flow type file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499285427667460"
          }
        ],
        "query_text": "flow-typed install moment-timezone"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499285366718754"
          }
        ],
        "query_text": "installing flow types for moment timezone"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499284836669756"
          }
        ],
        "query_text": "property tz not found in moment()"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499284549322324"
          }
        ],
        "query_text": "moment set timezone"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499284403793089"
          }
        ],
        "query_text": "TypeError: Cannot read property 'setDefault' of undefined moment"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499284391445472"
          }
        ],
        "query_text": "TypeError: Cannot read property 'setDefault' of undefined"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499284329808601"
          }
        ],
        "query_text": "time zone names"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499283879265733"
          }
        ],
        "query_text": "tz property not found in moment"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499283667975560"
          }
        ],
        "query_text": "moment api"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499283584034824"
          }
        ],
        "query_text": "moment T05"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499283394921006"
          }
        ],
        "query_text": "moment set global time zone"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499283230012575"
          }
        ],
        "query_text": "ubuntu gnome external monitor can't drag"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499283174832735"
          }
        ],
        "query_text": "14.04 how to turn off sticky edges"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499283090684526"
          }
        ],
        "query_text": "ubuntu gnome external monitor cant drag all the way"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499282764502130"
          }
        ],
        "query_text": "dancing fools"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499282366326939"
          }
        ],
        "query_text": "sceptre e24"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499281481562877"
          }
        ],
        "query_text": "how to use 2 hdmi monitors"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499281387116348"
          }
        ],
        "query_text": "patch failed patch does not apply"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499281329299193"
          }
        ],
        "query_text": "git apply diff"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499281156396596"
          }
        ],
        "query_text": "how to use 2 hdmi monitors with gnome"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499281148850230"
          }
        ],
        "query_text": "how to use 2 hdmi monitors"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499281088418150"
          }
        ],
        "query_text": "ubuntu gnome using 2 monitors"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499278281766539"
          }
        ],
        "query_text": "sceptre e24 remove stand"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499278271171615"
          },
          {
            "timestamp_usec": "1499278280947166"
          }
        ],
        "query_text": "how to remove monitor stand"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499278251885322"
          }
        ],
        "query_text": "sceptre e24 remove stand"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499278195657802"
          }
        ],
        "query_text": "sceptre monitor stand removal"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499278138353567"
          }
        ],
        "query_text": "how to remove monitor stand"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499276108108398"
          }
        ],
        "query_text": "git reset atlassian"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499275429606476"
          },
          {
            "timestamp_usec": "1499276102980736"
          }
        ],
        "query_text": "git reset"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499275406752339"
          }
        ],
        "query_text": "git undo commits"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499275188242578"
          }
        ],
        "query_text": "git move commits from one branch to another"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499275111456129"
          }
        ],
        "query_text": "move commits to another branch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499274970302556"
          }
        ],
        "query_text": "arc diff undo changes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499268921479674"
          }
        ],
        "query_text": "Error loading colour scheme Packages/Material Theme/schemes/Material-Theme.tmTheme: Unable to open Packages/Material Theme/schemes/Material-Theme.tmTheme"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499181190464860"
          },
          {
            "timestamp_usec": "1499181226420036"
          }
        ],
        "query_text": "Alewife Station, Cambridge, MA 02140 -> 48 Eldred St, Lexington, MA 02420"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499181172513403"
          }
        ],
        "query_text": "alewife"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499181166230906"
          }
        ],
        "query_text": "alewife -> 48 Eldred St, Lexington, MA 02420"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499181146616284"
          }
        ],
        "query_text": "Ashmont / Peabody Sq., Boston, MA -> 48 Eldred St, Lexington, MA 02420"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499181099821441"
          },
          {
            "timestamp_usec": "1499181103875506"
          }
        ],
        "query_text": "Ashmont / Peabody Sq., Boston, MA -> 48 Eldred st, Lexington"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499181093139330"
          }
        ],
        "query_text": "(Current Location) -> 48 Eldred st, Lexington"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499180769933577"
          }
        ],
        "query_text": "boston t map overlay"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499180767830180"
          }
        ],
        "query_text": "real t map boston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499180713368302"
          },
          {
            "timestamp_usec": "1499180724876822"
          },
          {
            "timestamp_usec": "1499180726223229"
          }
        ],
        "query_text": "t map boston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499180673567581"
          },
          {
            "timestamp_usec": "1499180674980296"
          },
          {
            "timestamp_usec": "1499180691968395"
          }
        ],
        "query_text": "(Current Location) -> 48 Eldred St, Lexington, MA 02420"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499180646578432"
          }
        ],
        "query_text": "48 Eldred st in Lexington"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499180183635941"
          }
        ],
        "query_text": "baby driver boston showtimes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499131162227848"
          }
        ],
        "query_text": "666 bandcamp"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499130635168436"
          }
        ],
        "query_text": "the pirate bay"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499127048894692"
          }
        ],
        "query_text": "youtube where is subscriptions bar"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499126167935518"
          }
        ],
        "query_text": "baby driver showtimes fenway"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499110970653437"
          },
          {
            "timestamp_usec": "1499110970660339"
          }
        ],
        "query_text": "(Current Location) -> Regal Cinemas Fenway 13 & RPX, Brookline Avenue, Boston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499107441236796"
          }
        ],
        "query_text": "(Current Location) -> Regal Cinemas Fenway 13 & RPX, Brookline Avenue, Boston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499107435209796"
          }
        ],
        "query_text": "(Current Location) -> Eliot, Newton, MA 02461"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499106716434849"
          },
          {
            "timestamp_usec": "1499106748373053"
          },
          {
            "timestamp_usec": "1499107426004934"
          },
          {
            "timestamp_usec": "1499107427075659"
          }
        ],
        "query_text": "Regal Cinemas Fenway 13 & RPX, Brookline Avenue, Boston, MA -> Eliot, Newton, MA 02461"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499106699267372"
          },
          {
            "timestamp_usec": "1499106699282884"
          }
        ],
        "query_text": "(Current Location) -> Eliot, Newton, MA 02461"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499106455858314"
          },
          {
            "timestamp_usec": "1499106461165862"
          }
        ],
        "query_text": "baby driver showtimes fenway"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499106424034179"
          }
        ],
        "query_text": "baby driver"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499105152031316"
          }
        ],
        "query_text": "react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499105136937405"
          }
        ],
        "query_text": "learn react"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499104741206355"
          },
          {
            "timestamp_usec": "1499104744664017"
          },
          {
            "timestamp_usec": "1499104926428070"
          },
          {
            "timestamp_usec": "1499104927211179"
          },
          {
            "timestamp_usec": "1499105093474342"
          }
        ],
        "query_text": "(Current Location) -> Eliot, Newton, MA 02461"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499104729108559"
          }
        ],
        "query_text": "Eliot, Newton, MA 02461"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499098823411803"
          }
        ],
        "query_text": "baby driver boston showtimes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499098785219405"
          }
        ],
        "query_text": "baby driver boston showtimes kenmore"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499098768022689"
          }
        ],
        "query_text": "baby driver boston showtimes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499059192488086"
          }
        ],
        "query_text": "macintosh plus floral shoppe"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499048694408686"
          }
        ],
        "query_text": "rock paper scissors tournament drinking game"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499048686591677"
          }
        ],
        "query_text": "rock paper scissors tournament"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499043261917955"
          },
          {
            "timestamp_usec": "1499043265582199"
          }
        ],
        "query_text": "green line d line"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499043182661907"
          },
          {
            "timestamp_usec": "1499043184372987"
          },
          {
            "timestamp_usec": "1499043226015496"
          }
        ],
        "query_text": "(Current Location) -> Olin College of Engineering West Hall, Needham, MA 02492"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499043179779696"
          }
        ],
        "query_text": "Olin College of Engineering West Hall, Needham, MA 02492"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499039412127636"
          }
        ],
        "query_text": "666 song band camp"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499037423976558"
          }
        ],
        "query_text": "cook burgers on the stove"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499034676877213"
          }
        ],
        "query_text": "kale shake recipe"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499031282663219"
          }
        ],
        "query_text": "threading.Event()"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499031054760238"
          },
          {
            "timestamp_usec": "1499031095205858"
          }
        ],
        "query_text": "global variables python"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499030421531359"
          }
        ],
        "query_text": "python kill a thread"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499029020795821"
          }
        ],
        "query_text": "threads in sublime text 3 plugins"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499028789489495"
          }
        ],
        "query_text": "functools partial"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499028183008849"
          }
        ],
        "query_text": "creating threads from sublime text plugins"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499028044324871"
          }
        ],
        "query_text": "python create a simple thread"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499027904659996"
          }
        ],
        "query_text": "sublime text 3 plugin examples"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499026872175964"
          }
        ],
        "query_text": "sublime text 3 plugin get window closing"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499026828048239"
          }
        ],
        "query_text": "sublime text 3 plugin api plugin_loaded"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499026735696935"
          }
        ],
        "query_text": "sublime text 3 plugin do something when sublime is opened or closed"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499025525345223"
          }
        ],
        "query_text": "os path is subpath"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499024617589319"
          }
        ],
        "query_text": "remove from list python"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499023476942405"
          }
        ],
        "query_text": "check if key is in dictionary python"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499022097421792"
          }
        ],
        "query_text": "eventlistener st3 get window"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499022092206650"
          }
        ],
        "query_text": "eventlistener get window"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499022054351087"
          }
        ],
        "query_text": "sublime text 3 plugin window event listener"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499020692654800"
          }
        ],
        "query_text": "git reference to detached heads branch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499020655201165"
          }
        ],
        "query_text": "git what is the head"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499020369805032"
          }
        ],
        "query_text": "get name of current branch git"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499020323226153"
          },
          {
            "timestamp_usec": "1499020328420974"
          }
        ],
        "query_text": "get sha of current branch"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499019739255352"
          }
        ],
        "query_text": "git rev-parse api"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499019639707720"
          },
          {
            "timestamp_usec": "1499019648702318"
          }
        ],
        "query_text": "git rev parse show current branch sha"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499019368014914"
          }
        ],
        "query_text": "git branch sha"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499019248863522"
          }
        ],
        "query_text": "get current branch of file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499018285217781"
          }
        ],
        "query_text": "subprocess python what does the shell parameter do"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499017383261364"
          }
        ],
        "query_text": "python subprocess"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499017334019129"
          }
        ],
        "query_text": "os.name nt"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499017243731137"
          }
        ],
        "query_text": "cwd vs pwd"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499017235047493"
          }
        ],
        "query_text": "ubuntu what is cwd"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499016540823635"
          }
        ],
        "query_text": "python |= operator"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499015162102662"
          }
        ],
        "query_text": "os.path.basename"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499014094464958"
          }
        ],
        "query_text": "sublime text 3 plugin api close view"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499013523268713"
          }
        ],
        "query_text": "underscore case vs camelcase"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499013061504969"
          }
        ],
        "query_text": "sublime text 3 don't see default package"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499013008889671"
          }
        ],
        "query_text": "where are st3 default plugins"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499012640192034"
          }
        ],
        "query_text": "sublime text 3 plugin api"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499012041123095"
          }
        ],
        "query_text": "writing plugins for sublime text 3"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499011866039386"
          }
        ],
        "query_text": "sublime text 3 plugin examples give error"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499011810253807"
          }
        ],
        "query_text": "print view.fileName(), \"just got loaded\" ^ SyntaxError: invalid syntax"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499011510606160"
          }
        ],
        "query_text": "python file header executable"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499011273043830"
          }
        ],
        "query_text": "gitgutter"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499011090184422"
          }
        ],
        "query_text": "pip install shutil not working"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499010760380312"
          }
        ],
        "query_text": "change default python ubuntu"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499010684290558"
          }
        ],
        "query_text": "virtualenvwrapper specific python version"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499010639070963"
          }
        ],
        "query_text": "virtualenvwrapper select which version of python to use"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499010617598394"
          }
        ],
        "query_text": "sublime text 3 plugin what version of python is supported"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499010590419804"
          }
        ],
        "query_text": "cannot install shutil"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499010319614719"
          }
        ],
        "query_text": "python copy file"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499007030817025"
          }
        ],
        "query_text": "add border to outside of element rather than inside"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499005721978104"
          }
        ],
        "query_text": "how to make a sublime plugin"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499005529852484"
          }
        ],
        "query_text": "google slides"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1499005477094504"
          }
        ],
        "query_text": "google drive"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498963718164328"
          }
        ],
        "query_text": "(Current Location) -> Bonchon Chicken, 123 Brighton Ave, Boston, MA 02134"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498963516048356"
          }
        ],
        "query_text": "fried chicken"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498960793483089"
          }
        ],
        "query_text": "landmines rules"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498954857508931"
          }
        ],
        "query_text": "dave chappelle"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498945801185997"
          }
        ],
        "query_text": "doug stanhope bingo"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498945529754190"
          }
        ],
        "query_text": "doug stanhope boston"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498942122432756"
          }
        ],
        "query_text": "watch futurama season 7"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498942082282213"
          }
        ],
        "query_text": "watch futurama season 6 free online"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498941445083985"
          }
        ],
        "query_text": "delicious low calorie ways to prepare vegetables"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498936631670926"
          }
        ],
        "query_text": "silicon valley season 4 episodes"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498928384608923"
          }
        ],
        "query_text": "t bus stop app"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498926550787679"
          }
        ],
        "query_text": "(Current Location) -> 102 Chester Street, Allston, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498922231268720"
          }
        ],
        "query_text": "t bus stop app"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498920902827833"
          },
          {
            "timestamp_usec": "1498920909345903"
          }
        ],
        "query_text": "(Current Location) -> Morse Elementary School, 40 Granite St, Cambridge, MA 02139"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498920900589504"
          }
        ],
        "query_text": "morse school"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498920388277292"
          }
        ],
        "query_text": "canoe on the charles"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498883164222076"
          }
        ],
        "query_text": "canoe on the charles"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498883121397412"
          }
        ],
        "query_text": "difference between canoe and kayak"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498882759237527"
          }
        ],
        "query_text": "Q Ballroom Cambridge, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498882712547855"
          }
        ],
        "query_text": "swing dancing in caMbridge on saturday"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498882695951601"
          }
        ],
        "query_text": "swing in cambridge"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498882586956496"
          }
        ],
        "query_text": "Boston Swing Central Cambridge, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498882582844578"
          }
        ],
        "query_text": "Swing City Boston Cambridge, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498882579626479"
          }
        ],
        "query_text": "swing in cambridge"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498882523947504"
          }
        ],
        "query_text": "Swing City Boston Cambridge, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498882513720816"
          },
          {
            "timestamp_usec": "1498882517520794"
          }
        ],
        "query_text": "swing in cambridge"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498882371826386"
          },
          {
            "timestamp_usec": "1498882377708248"
          },
          {
            "timestamp_usec": "1498882511627900"
          }
        ],
        "query_text": "dancing fools cambridge"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498882362525184"
          }
        ],
        "query_text": "swing in cambridge"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498882239325912"
          }
        ],
        "query_text": "Boston Swing Central Cambridge, MA"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498882210734459"
          }
        ],
        "query_text": "swing in cambridge"
      }
    },
    {
      "query": {
        "id": [
          {
            "timestamp_usec": "1498879248170288"
          }
        ],
        "query_text": "chance new album"
      }
    }
  ]
}
